<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端 on TomtomYoung Blog</title>
    <link>https://gaoshanwomeng.github.io/categories/%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in 前端 on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoshanwomeng.github.io/categories/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>js 迭代器与生成器</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>什么是生成器 生成器其实就是一个特殊的函数，是异步编程的一种解决方案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //函数代码的分隔符 function * gen(){ console.log(111); yield &amp;#39;一只没有耳朵&amp;#39;; console.log(222); yield &amp;#39;一只没有尾部</description>
    </item>
    
    <item>
      <title>js 作用域&amp;作用域链&amp;闭包</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
      <description>hhh</description>
    </item>
    
    <item>
      <title>js 箭头函数详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</guid>
      <description>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 为什么叫Arrow Function？因为它的定义用的就是一个箭头： 1 x =&amp;gt; x * x 上面的箭头函数相当于： 1 2 3 function (x) { return x * x; } 箭头函数</description>
    </item>
    
    <item>
      <title>react hooks详解</title>
      <link>https://gaoshanwomeng.github.io/post/react-hooks%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-hooks%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>react 类式组件与函数式组件</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</guid>
      <description>React中有两种定义组件的方式： 函数式定义组件 1 2 3 function Welcome() { return &amp;lt;h1&amp;gt;函数式&amp;lt;/h1&amp;gt; } 类式定义组件 1 2 3 4 5 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;类式&amp;lt;/h1&amp;gt;; }</description>
    </item>
    
    <item>
      <title>js 手写promise</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%89%8B%E5%86%99promise/</guid>
      <description>1. 简易版Promise 1. 实现executor 比如我们实例化一个Promise对象时，会这样写： 1 2 3 let p1 = new Promise((resolve, reject) =&amp;gt; { resolve(12345); }) 这里要注意的是： constructor接收一个函数作为参数； 这个传入的函数会在实</description>
    </item>
    
    <item>
      <title>浏览器 本地存储详解</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 基本概念 Cookie Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身</description>
    </item>
    
    <item>
      <title>js jsonp详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-jsonp%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-jsonp%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 同源策略和域 关于什么是浏览器的同源策略，什么是域，可以查看本站另一篇文章：浏览器 同源策略详解</description>
    </item>
    
    <item>
      <title>浏览器 同源策略详解</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 维基百科_同源策略 浏览器同源政策及其规避方法 MDN_浏览器的同源策略 web_dev_同源策略 1. 同源策略 1. 什么是源 两个 URL 的 protocol、port (如果有指定的话)和 host组成了源。这个方案也</description>
    </item>
    
    <item>
      <title>js map详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-map%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-map%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. map 定义 MDN map Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值都可以作为一个键或一个值。 map和object的对比 Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（</description>
    </item>
    
    <item>
      <title>js 模块化详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 发展历程 在本站另一篇博客：webpack简介的第一个章节：为什么使用webpack中，我们介绍了js代码编写的不同阶段： 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方</description>
    </item>
    
    <item>
      <title>浏览器 xss&amp;csrf</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</guid>
      <description>1：什么是XSS攻击？ XSS，即 Cross Site Script，跨站脚本攻击； XSS 攻击是指攻击者在网站上注入恶意的客户端代码，对客户端网页进行篡改，对用户浏览器进行控制或者获取用户隐私数据； XSS攻击可以分为3类：反</description>
    </item>
    
    <item>
      <title>js promise详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise表示异步操作的最终结果。与promise交互的主要方式是通过它的then方</description>
    </item>
    
    <item>
      <title>js 原型&amp;原型链&amp;继承</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</guid>
      <description>1. prototype 每个函数都有一个 prototype 属性 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&amp;quot;继承&amp;quot;属性。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>js setTimeout&amp;setInterval</title>
      <link>https://gaoshanwomeng.github.io/post/js-settimeoutsetinterval/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-settimeoutsetinterval/</guid>
      <description>1. setTimeout setTimeout的在一段时间之后，执行指定的一段函数 （仅执行一次） 可以理解为指定延迟后执行函数 2. setInterval setInterval是循环执行函数，每隔一段时间就执行一次指定的函数（执行N次） 可以理解为指</description>
    </item>
    
    <item>
      <title>js 事件循环与异步并发</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</guid>
      <description>1. JS事件 The event loop is the secret behind JavaScript’s asynchronous programming. JS executes all operations on a single thread, but using a few smart data structures, gives us the illusion of multi-threading. The asynchronous behavior is not part of the JavaScript language itself, rather it is built on top of the core JavaScript language in the browser (or the programming environment) and accessed through the browser APIs. 事件循环是JavaScript异步编</description>
    </item>
    
    <item>
      <title>git husky简介</title>
      <link>https://gaoshanwomeng.github.io/post/git-husky%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-husky%E7%AE%80%E4%BB%8B/</guid>
      <description>husky5.x使用总结 husky可以让我们向项目中方便添加git hooks。通常情况下只需要如下两步就可在项目中引入并设置好husky： 将husky添加到项目的开发依赖中 1 npm install -D husky 在package.</description>
    </item>
    
    <item>
      <title>nodejs 事件循环</title>
      <link>https://gaoshanwomeng.github.io/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>事件循环机制解析 当 Node.js 启动后，它会初始化事件循环，处理已提供的输入脚本（或丢入 REPL，本文不涉及到），它可能会调用一些异步的 API、调度定时器，或者调用 process.nextTick()，然后开始处</description>
    </item>
    
    <item>
      <title>git 分支的新建与合并</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</guid>
      <description>切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分</description>
    </item>
    
    <item>
      <title>git 家族式命令</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 初始化配置 config 1 2 3 4 5 git config -global user.name &amp;lt;name&amp;gt; #设置提交者名字 git config -global user.email &amp;lt;email&amp;gt; #设置提交者邮箱 git config -global core.editor &amp;lt;editor&amp;gt; #设置默认文本编辑器 git config -global merge.tool &amp;lt;tool&amp;gt; #设置解决合并冲突时差异分析工具 git config -list #检查已有的配置信息 2. 创建本地仓库 init 1 git init #初</description>
    </item>
    
    <item>
      <title>git 远程仓库与本地仓库</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>1. 从远程主机克隆 Git 的 clone 命令会为你自动将远程主机命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。同时Git 也会给你一个与 origin 的maste</description>
    </item>
    
    <item>
      <title>js IIFE简介</title>
      <link>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 场景 下面这个面试题你大概率遇到过： 1 2 3 4 5 for (var i = 0; i &amp;lt; 5; i++) { setTimeout(() =&amp;gt; { console.log(i); }, 10); } 这里var会声明一个全局变量i。函数会在10秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时</description>
    </item>
    
    <item>
      <title>浏览器 浏览器多进程/js单线程</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8Bjs%E5%8D%95%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8Bjs%E5%8D%95%E7%BA%BF%E7%A8%8B/</guid>
      <description>windows打开任务管理器，可以看到后台进程列表。可以看到每个进程的内存资源信息以及cpu占有率。 所以，应该更容易理解了：进程是cpu资源分配的最小单位（系统会给它分配内存） 最后，再用较为官方的术语</description>
    </item>
    
    <item>
      <title>js webpack简介</title>
      <link>https://gaoshanwomeng.github.io/post/js-webpack%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-webpack%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 为什么使用webpack 1. 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方法： 引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载大量脚本会导致网络瓶颈。 使用一个包</description>
    </item>
    
    <item>
      <title>vscode常用快捷键</title>
      <link>https://gaoshanwomeng.github.io/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. 编辑器操作 ctrl+shift+n 打开新的编辑器窗口 ctrl+shiift+w 关闭当前编辑器窗口 f11 全屏显示 2. 文件操作 ctrl+tab 在打开的文件之间进行切换 ctrl+n 新建文件 ctrl+w 关闭当前文件窗口 ctrl+\ 切出一个新的文件窗口 ctrl+alt+→/← 将当前文件切到新窗口 3. 光标移</description>
    </item>
    
    <item>
      <title>浏览器 console API</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</guid>
      <description>console.assert(expression, object) 级别：Error expression评估为false时，将object写入控制台。 1 2 3 4 const x = 5; const y = 3; const reason = &amp;#39;x is expected to be less than y&amp;#39;; console.assert(x &amp;lt; y, {x, y, reason}); console.clear() 清空控制台 1 console.clear(); 如果启用了Preserve Log，con</description>
    </item>
    
    <item>
      <title>react react-native简介</title>
      <link>https://gaoshanwomeng.github.io/post/react-react-native%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-react-native%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是React Native 要了解RN，肯定是要从官网入手： 按照官网的介绍，RN是使用React来创建Android和ios的原生应用的JavaScript框架。 RN具有以下的特点： 一次学习，随处编写 因为R</description>
    </item>
    
    <item>
      <title>react 简介</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是react 用来构建UI的 JavaScript库 React 不是一个 MVC 框架，仅仅是视图（V）层的库 2. react的特点 使用 JSX语法 创建组件，实现组件化开发，为函数式的 UI 编程方式打开了大门 虚拟DOM（Vir</description>
    </item>
    
    <item>
      <title>浏览器 chrome常用快捷键</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. 浏览器快捷键 f12/ctrl+shift+c 打开devtools element界面 ctrl+shift+j 直接打开devtools console界面 ctrl+n 打开新的浏览器窗口 ctrl+shift+n 打开新的无痕浏览窗口 ctrl+w 关闭当前页面 shift+esc 打开任务管理器 ctrl+1-x 切换到不同页面 ctrl+p 打印页面 2. 开</description>
    </item>
    
    <item>
      <title>浏览器 chrome开发者工具使用指南</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>1. console面板 1.1 查看记录的消息 记录消息的原因一般有两个： 确保代码以正确的顺序执行。 在某个时刻检查变量的值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 console.log(&amp;#39;Loading!&amp;#39;); console.assert(document.querySelector(&amp;#39;h2&amp;#39;), &amp;#39;h2 not found!&amp;#39;); const artists = [ { first: &amp;#39;René&amp;#39;, last:</description>
    </item>
    
    <item>
      <title>css vh&amp;vw</title>
      <link>https://gaoshanwomeng.github.io/post/css-vhvw/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/css-vhvw/</guid>
      <description>1. vw vh的介绍 vw,vh是css3中给我们提供的新的单位，他们是相对于viewport视窗的宽高进行计算的单位。说白了，就是相对于浏览器的窗口的大小。 vw : 1vw 等于视口宽度的1% vh : 1vh 等于视口高度的1% vmin</description>
    </item>
    
    <item>
      <title>import React,{Component} from &#39;react&#39;解释</title>
      <link>https://gaoshanwomeng.github.io/post/import-reactcomponent-from-react%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/import-reactcomponent-from-react%E8%A7%A3%E9%87%8A/</guid>
      <description>在学习react框架时，我们会在App.js中写这样一种语法： 1 import React,{Component} from &amp;#39;react&amp;#39; 表面看起来是结构赋值的样子，但其实，这是ES6的另一种引入方式，即default引入与单个引入相结合的方式。 想使用这种引入方式，</description>
    </item>
    
    <item>
      <title>js 函数柯里化与高阶函数</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>1. 函数柯里化 函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 2. 高阶函数定义 高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。 若A函数，</description>
    </item>
    
    <item>
      <title>es6 对象方法扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //1. Object.is 判断两个值是否完全相等 console.log(Object.is(120, 120));// === console.log(Object.is(NaN, NaN));// === console.log(NaN === NaN);// === //2. Object.assign 对象的合并 const config1 = { host: &amp;#39;localhost&amp;#39;, port: 3306, name: &amp;#39;root&amp;#39;, pass: &amp;#39;root&amp;#39;, test: &amp;#39;test&amp;#39; }; const config2 = { host: &amp;#39;http://atguigu.com&amp;#39;, port: 33060, name: &amp;#39;atguigu.com&amp;#39;, pass: &amp;#39;iloveyou&amp;#39;, test2: &amp;#39;test2&amp;#39; } // config</description>
    </item>
    
    <item>
      <title>es6 数值扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</guid>
      <description>1. Number.EPSILON Number.EPSILON 是 JavaScript 表示的最小精度 EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16 1 2 3 4 5 6 7 8 9 10 function equal(a, b){ if(Math.abs(a-b) &amp;lt; Number.EPSILON){ return true; }else{ return false; } } console.log(0.1 + 0.2 === 0.3); // false 0.1+1.2 = 0.30000000000000004 console.log(equal(0.1 + 0.2, 0.3)) // true 2. 二进制和八进制 1 2 3 4 5 let b = 0b1010; let o = 0o777; let d = 100; let x = 0xff; console.log(x); 3. Number.isFinite Number.isFinite 检测一个数值是</description>
    </item>
    
    <item>
      <title>js 数据结构</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是计算机存储、组织数据的方式,算法是系统描述解决问题的策略。了解基本的数据结构和算法可以提高代码的性能和质量。 1. 栈 栈的特点：先进后出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>cross origin requests are only supported for protocol schemes填坑</title>
      <link>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</guid>
      <description>今天在写了一个简单的H5页面，项目结构如下图所示： 然后在运行的时候突然报错 Access to script at ‘file:///Volumes/PERSON/font_end/h5xuexi/h5-learning3/vue_n</description>
    </item>
    
    <item>
      <title>es6 模板字符串</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>字符串模板引擎 ES5中的字符串缺乏多行字符串、字符串格式化、HTML转义等特性。 而ES6通过模板字面量的方式进行了填补，模板字面量试着跳出JS已有的字符串体系，通过一些全新的方法来解决问题。 1.基本用</description>
    </item>
    
    <item>
      <title>elementUI事件回调函数传参，传递默认参数和自定义参数填坑</title>
      <link>https://gaoshanwomeng.github.io/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</guid>
      <description>使用element一些组件，事件如果还有默认参数，如果想在添加自定义参数。 如： handleCheckedCitiesChange事件默认有一个回调参数，如果传一个自定义参数直接写的话 handleCheckedCitiesChange (“自定义参数”</description>
    </item>
    
    <item>
      <title>js 循环遍历详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. for循环 javascript中的for循环选择多种多样，可你知道其中的差别在哪里吗？什么时候又该用哪种循环才是最佳策略？ 1.1 for 1 2 3 4 //20年前的写法let len = myArray.Length for (let index = 0; index &amp;lt; len; index++) { console.log(myArray[index]) } 1.2 forEach 1 2 3</description>
    </item>
    
    <item>
      <title>js 正则表达式</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的&amp;quot;hello&amp;quot;这个子串。 1 2 var regex = /hello/; console.log( regex.test(&amp;#34;hello&amp;#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而</description>
    </item>
    
    <item>
      <title>vue v-if填坑</title>
      <link>https://gaoshanwomeng.github.io/post/vue-v-if%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-v-if%E5%A1%AB%E5%9D%91/</guid>
      <description>在使用v-if控制元素显示隐藏时候，如果判断条件是数组中的元素，在一开始页面渲染显示正常，可以用数组内的变量来控制v-if元素，但是以后通过方法直接改变数组内变量却不能影响v-if控制的元素显示隐藏。</description>
    </item>
    
    <item>
      <title>lodop api文档</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-api%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-api%E6%96%87%E6%A1%A3/</guid>
      <description>1. 控件参数 Lodop有如下控件参数,以页面object对象元素的参数形式使用： Caption 名称：设置控件的显示标题 格式： &amp;lt; pa ram name=&amp;ldquo;Caption&amp;rdquo; value=&amp;ldquo;我是打印控件lodop&amp;rdquo; &amp;gt; 功能： 控件在页面内</description>
    </item>
    
    <item>
      <title>lodop lodop&amp;c-lodop</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-lodopc-lodop/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-lodopc-lodop/</guid>
      <description>转载自：http://www.c-lodop.com/faq/pp21.html 一．安装文件 1.Lodop打印控件安装文件两个: 32位安装程序：install_lodop32.exe； 64位安装程序：</description>
    </item>
    
    <item>
      <title>lodop 控件未安装</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-%E6%8E%A7%E4%BB%B6%E6%9C%AA%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-%E6%8E%A7%E4%BB%B6%E6%9C%AA%E5%AE%89%E8%A3%85/</guid>
      <description>转载自：http://www.c-lodop.com/faq/pp21.html 高版本的火狐谷歌不再支持np插件方式，需要安装使用C-Lodop，Lodop与C-Lodop的区别参考http://ww</description>
    </item>
    
    <item>
      <title>vue v-model绑定vuex中state数据报错填坑</title>
      <link>https://gaoshanwomeng.github.io/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</guid>
      <description>1. 代码背景 用vuex管理数据状态，state中有定义 expressTemplate: false, vue的cart页面有使用vant的标签, 提示报错Computed property “expressTemplate” was assigned to but it has no setter. 1 2 3 &amp;lt;el-radio-group v-model=&amp;#34;expressTemplate&amp;#34;&amp;gt; &amp;lt;el-radio v-for=&amp;#34;( item, index ) in expressList&amp;#34; :key=&amp;#34;index&amp;#34;</description>
    </item>
    
    <item>
      <title>ssr&amp;csr</title>
      <link>https://gaoshanwomeng.github.io/post/ssrcsr/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ssrcsr/</guid>
      <description>1. SSR和CSR的概念 SSR(Server Side Rendering)： SSR是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染</description>
    </item>
    
    <item>
      <title>el-table定制选中行样式和展开行样式</title>
      <link>https://gaoshanwomeng.github.io/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</guid>
      <description>1. 变量 变量如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 data() { return { // 记录选中行 selectRow: [], // 记录展开行 expandRow: [], // 表格数据 id必须有！！ tableData: [ { id: 1, wangwangID: &amp;#39;hahahaha-101&amp;#39;, count: &amp;#39;20&amp;#39;, date:</description>
    </item>
    
    <item>
      <title>elementUI组件二次封装</title>
      <link>https://gaoshanwomeng.github.io/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</guid>
      <description>1. 新建组件 在components文件夹下新建组件，或者可以新建一个UI文件夹，用来专门存放二次封装的UI组件。 2. 编写组件 1. 基本结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;template&amp;gt; &amp;lt;el-dialog class=&amp;#34;dialog-1&amp;#34; &amp;gt; &amp;lt;/el-dialog&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { name: &amp;#34;myDialog1&amp;#34;, props: { },</description>
    </item>
    
    <item>
      <title>git 简介</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E7%AE%80%E4%BB%8B/</guid>
      <description>1. Git的诞生 转载廖雪峰的官方网站中的部分内容：https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784 很多人都知道，Linus</description>
    </item>
    
    <item>
      <title>node&amp;npm简介</title>
      <link>https://gaoshanwomeng.github.io/post/nodenpm%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/nodenpm%E7%AE%80%E4%BB%8B/</guid>
      <description>1.jacascript JavaScript和ECMAScript通常被人用来表达相同的意思，但JavaScript的含义去比ECMA-262中规定的多得多。一个完整的JavaScript实现应由三个部分组成： 核心（ECM</description>
    </item>
    
    <item>
      <title>ajax 预检请求</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</guid>
      <description>1.什么是预检请求 定义：预检请求（Preflighted requests ）是浏览器发起跨域请求时，通过OPTIONS方法询问服务器对跨域请求的支持情况（支持的包含请求方法、请求头、数据类型）。 2.什么时候会触发预检</description>
    </item>
    
    <item>
      <title>ajax xhr</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-xhr/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-xhr/</guid>
      <description>1. XMLHTTPRequest（xhr） XMLHTTPRequest对象，顾名思义：是基于XML的HTTP请求。我们在浏览器中使用XMLHTTPRequest对象在服务器之间通信，传输的数据是使用XM</description>
    </item>
    
    <item>
      <title>前后端分离简介</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 前后端不分离 我们先看看一个 Web 系统，在前后端不分离时架构设计是什么样的： 用户在浏览器上发送请求，服务器端接收到请求，根据 Header 中的 token 进行用户鉴权，从数据库取出数据，处理后将结果数据填入 HTML 模板，返回给浏览器</description>
    </item>
    
    <item>
      <title>flash简介</title>
      <link>https://gaoshanwomeng.github.io/post/flash%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/flash%E7%AE%80%E4%BB%8B/</guid>
      <description>Flash是一种交互式矢量图和Web动画的标准，它可以用来制作动画或者播放视频。作为一款诞生20多年的产品，Flash当然也有过它的巅峰。无数优质的Flash动画和游戏，在那个时代，Flash似乎就是</description>
    </item>
    
    <item>
      <title>html5&amp;html&amp;h5</title>
      <link>https://gaoshanwomeng.github.io/post/html5htmlh5/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/html5htmlh5/</guid>
      <description>1.官方解释 1.1 html HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组</description>
    </item>
    
    <item>
      <title>svg简介</title>
      <link>https://gaoshanwomeng.github.io/post/svg%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/svg%E7%AE%80%E4%BB%8B/</guid>
      <description>1.官方解释 SVG是一种图像文件格式，它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形。它是基于XML（Extensible Markup Language），由World Wide Web Consort</description>
    </item>
    
    <item>
      <title>vue vuex中的modules使用</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuex%E4%B8%AD%E7%9A%84modules%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuex%E4%B8%AD%E7%9A%84modules%E4%BD%BF%E7%94%A8/</guid>
      <description>转载链接：https://www.cnblogs.com/codebook/p/13416465.html 这篇文章主要介绍了vuex中modules的基本用法。 1. store文件结构 1 2 3 4 5 6 7 - src -</description>
    </item>
    
    <item>
      <title>vue slot简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-slot%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-slot%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是插槽？ 插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组</description>
    </item>
    
    <item>
      <title>vue vuex简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuex%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuex%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Vuex概述 Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享 使用Vuex管理数据的好处： A.能够在vuex中集中管理共享的数据，便于开发和后期进行维护 B.能够高效</description>
    </item>
    
    <item>
      <title>ecmascript&amp;javascript</title>
      <link>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</guid>
      <description>1. ECMAScript的简介 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这</description>
    </item>
    
    <item>
      <title>js let&amp;const&amp;var</title>
      <link>https://gaoshanwomeng.github.io/post/js-letconstvar/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-letconstvar/</guid>
      <description>1. let，const没有变量提升 首先让我们了解下JavaScript变量赋值的大概过程： 1 2 3 4 5 6 7 8 9 10 11 12 ECStack EC(G) VO(G) 声明提升(函数+变量) 1. 函数声明提升 2. 变量声明提升 变量赋值： 1. 创建变量 2. 创建值(对</description>
    </item>
    
    <item>
      <title>ts 断点调试</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</guid>
      <description>1.什么是断点 断点是程序暂停执行的位置，调试时程序运行到此处，就会暂停。 2.vscode中配置ts调试 在vscode中选择运行，然后选择添加配置： 在launch.json里写入一下内容 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>ts ts与vue</title>
      <link>https://gaoshanwomeng.github.io/post/ts-ts%E4%B8%8Evue/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-ts%E4%B8%8Evue/</guid>
      <description>1.为什么是TS+VUE 前端正处在逐步挺进企业级开发业务的过程中，强类型的TS已经广泛的使用起来，而脚手架工具也是前端工程化的基础。 2.使用vuecli脚手架创建项目 1.创建项目 1 vue create 项目名 2.安装v</description>
    </item>
    
    <item>
      <title>ts 类与对象</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
      <description>下面我们建一个类：class Duck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Duck { DuckName: string; Age: number; Fly: string; constructor(duckName: string, age: number, fly: string) { this.DuckName = duckName; this.Age = age; this.Fly = fly; } greet() { let outString: string = &amp;#34;我是鸭子，我的名字是&amp;#34; + this.DuckName + &amp;#34;，我现在&amp;#34;</description>
    </item>
    
    <item>
      <title>socket简介</title>
      <link>https://gaoshanwomeng.github.io/post/socket%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/socket%E7%AE%80%E4%BB%8B/</guid>
      <description>网络编程就是编写程序使两台联网的计算机相互交换数据。这就是全部内容了吗？是的！网络编程要比想象中的简单许多。 那么，这两台计算机之间用什么传输数据呢？首先需要物理连接。如今大部分计算机都已经连接到互联网</description>
    </item>
    
    <item>
      <title>ts 基础语法</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>1.变量与数据类型 1.声明变量 在js中变量是不区分类型的，这一点在ts中做出了改变，ts规定变量在声明时必须规定好这个变量的数据类型，并以:的形式进行指定。 2.数据类型 JavaScript 的类型分为两种：原始数据类型（</description>
    </item>
    
    <item>
      <title>ts 安装和配置</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>1.TS简介 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。 其次引用官网的定义： TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上</description>
    </item>
    
    <item>
      <title>互联网运作方式</title>
      <link>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F/</guid>
      <description>1.举例 我们以我们使用浏览器访问bilibili这个网站为例，来看一下我们是如何使用互联网来发送和接收数据的。 当我的个人电脑接入互联网之后，我的电脑会得到一个编号用来标识我这台电脑的身份，这个编号地址</description>
    </item>
    
    <item>
      <title>ajax axios发送post请求踩坑记录</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</guid>
      <description>使用axios发送post请求，在后端接收不到传过来的参数，多方查证无果，最终找到了这篇文章，转载过来作为记录。 作者：Never Yu丶 文章：axios 发 post 请求，后端接收不到参数的解决方案 链接：http</description>
    </item>
    
    <item>
      <title>electron简介</title>
      <link>https://gaoshanwomeng.github.io/post/electron%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/electron%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Electron 是什么 1.Electron定义 Electron是一个能让你使用传统前端技术（Nodejs, Javascript, HTML, CSS）开发一个跨平台桌面应用的框架。这里所说的桌面应用指的是在Windows、OSX及Linux系统上</description>
    </item>
    
    <item>
      <title>vue vuecli简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuecli%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuecli%E7%AE%80%E4%BB%8B/</guid>
      <description>1.vue-cli简介 vue-cli俗称脚手架，可以快速创建vue项目结构，学习完webpack之后，我们会有一种体会就是项目的每个文件夹，每个文件都需要我们手动新建，小项目还好，如果遇到复杂的大项目</description>
    </item>
    
    <item>
      <title>vue 简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Vue快速体验 1.Vue介绍 1.Vue是什么 Vue.js是优秀的前端 JavaScript 框架 Vue.js是一套构建用户界面的渐进式框架，Vue只关注视图层， 采用自底向上增量开发的设计，Vue 的目标是通过尽可能简单的</description>
    </item>
    
    <item>
      <title>微信小程序开发基础</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</guid>
      <description>1.微信小程序简介 1.小程序和网页的区别 js操作不同 微信小程序里没有DOM和BOM，非常像vue，但是vue是有但是不用，而小程序是直接没有，这导致了我们平时使用的库很多也都不能用，比如jQuery等</description>
    </item>
    
  </channel>
</rss>
