<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>精选 on TomtomYoung Blog</title>
    <link>https://tomtomyoung.top/categories/%E7%B2%BE%E9%80%89/</link>
    <description>Recent content in 精选 on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 14 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomtomyoung.top/categories/%E7%B2%BE%E9%80%89/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浏览器 同源策略详解</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 维基百科_同源策略 浏览器同源政策及其规避方法 MDN_浏览器的同源策略 web_dev_同源策略 1. 同源策略 1. 什么是源 两个 URL 的 protocol、port (如果有指定的话)和 host组成了源。这个方案也</description>
    </item>
    
    <item>
      <title>js set详解</title>
      <link>https://tomtomyoung.top/post/js-set%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-set%E8%AF%A6%E8%A7%A3/</guid>
      <description>Set 对象 Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 Set 中的特殊值 Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待： +0 与 -0 在存储判断唯一性的时候是恒等的，所</description>
    </item>
    
    <item>
      <title>计算机网络 http缓存详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN HTTP/Caching MDN Cache-Control MDN Expires MDN ETag MDN If-None-Match 彻底弄懂HTTP缓存机制及原理 5分钟看懂系列：HTTP缓存机制详解 1. 什么是HTTP缓存 通过复用以前获取的资源，可以显著提高网站和应用程序的性能。 HTTP 缓存减少了等待时间和网络流量</description>
    </item>
    
    <item>
      <title>计算机网络 http请求与响应详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN http 1. HTTP报文 HTTP消息是服务器和客户端之间交换数据的方式。有两种类型的消息︰ 请求（requests）&amp;ndash;由客户端发送用来触发一个服务器上的动作； 响应（responses）&amp;nd</description>
    </item>
    
    <item>
      <title>计算计网络 域名与dns详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E8%AE%A1%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E4%B8%8Edns%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E8%AE%A1%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E4%B8%8Edns%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN DNS DNS 原理入门 what-is-dns 工程师最容易搞错的域名知识 域名层级划分 域名分级与域名解析过程(DNS) 1. 域名 1. 域名的层级 根域名.root对于所有域名都是一样的，所以平时是省略的； 根服务器主要用来管理互联网的主目</description>
    </item>
    
    <item>
      <title>js 手写promise</title>
      <link>https://tomtomyoung.top/post/js-%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%89%8B%E5%86%99promise/</guid>
      <description>1. 简易版Promise 1. 实现executor 比如我们实例化一个Promise对象时，会这样写： 1let p1 = new Promise((resolve, reject) =&amp;gt; { 2 resolve(12345); 3}) 这里要注意的是： constructor接收一个函数作为参数； 这个传入的函数会在实例化</description>
    </item>
    
    <item>
      <title>js jsonp详解</title>
      <link>https://tomtomyoung.top/post/js-jsonp%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-jsonp%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 同源策略和域 关于什么是浏览器的同源策略，什么是域，可以查看本站另一篇文章：浏览器 同源策略详解</description>
    </item>
    
    <item>
      <title>js map详解</title>
      <link>https://tomtomyoung.top/post/js-map%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-map%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. map 定义 MDN map Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值都可以作为一个键或一个值。 map和object的对比 Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（</description>
    </item>
    
    <item>
      <title>js 模块化详解</title>
      <link>https://tomtomyoung.top/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 发展历程 在本站另一篇博客：webpack简介的第一个章节：为什么使用webpack中，我们介绍了js代码编写的不同阶段： 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方</description>
    </item>
    
    <item>
      <title>浏览器 xss&amp;csrf</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</guid>
      <description>1：什么是XSS攻击？ XSS，即 Cross Site Script，跨站脚本攻击； XSS 攻击是指攻击者在网站上注入恶意的客户端代码，对客户端网页进行篡改，对用户浏览器进行控制或者获取用户隐私数据； XSS攻击可以分为3类：反</description>
    </item>
    
    <item>
      <title>js promise详解</title>
      <link>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise表示异步操作的最终结果。与promise交互的主要方式是通过它的then方</description>
    </item>
    
    <item>
      <title>js 原型&amp;原型链&amp;继承</title>
      <link>https://tomtomyoung.top/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</guid>
      <description>1. prototype 每个函数都有一个 prototype 属性 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&amp;quot;继承&amp;quot;属性。 1function Person() { 2 3}</description>
    </item>
    
    <item>
      <title>js setTimeout&amp;setInterval</title>
      <link>https://tomtomyoung.top/post/js-settimeoutsetinterval/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-settimeoutsetinterval/</guid>
      <description>1. setTimeout setTimeout的在一段时间之后，执行指定的一段函数 （仅执行一次） 可以理解为指定延迟后执行函数 2. setInterval setInterval是循环执行函数，每隔一段时间就执行一次指定的函数（执行N次） 可以理解为指</description>
    </item>
    
    <item>
      <title>js 事件循环与异步并发</title>
      <link>https://tomtomyoung.top/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</guid>
      <description>参考： The JavaScript Event Loop: Explained ES2015(ES6) MDN_并发模型与事件循环 MDN_深入：微任务和 JavaScript 运行时环境 MDN_在 JavaScript 中通过 queueMicrotask() 使用微任务 Node.js_event_loop WHATWG规范_event_loop JavaScript Info_event-loop 宏任务和微任务到底是什么？ JavaScript 运行机制详解：再谈E</description>
    </item>
    
    <item>
      <title>git 分支的新建与合并</title>
      <link>https://tomtomyoung.top/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</guid>
      <description>切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分</description>
    </item>
    
    <item>
      <title>git 家族式命令</title>
      <link>https://tomtomyoung.top/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 初始化配置 config 1git config -global user.name &amp;lt;name&amp;gt; #设置提交者名字 2git config -global user.email &amp;lt;email&amp;gt; #设置提交者邮箱 3git config -global core.editor &amp;lt;editor&amp;gt; #设置默认文本编辑器 4git config -global merge.tool &amp;lt;tool&amp;gt; #设置解决合并冲突时差异分析工具 5git config -list #检查已有的配置信息 2. 创建本地仓库 init 1git init #初始化本地版本</description>
    </item>
    
    <item>
      <title>git 远程仓库与本地仓库</title>
      <link>https://tomtomyoung.top/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>1. 从远程主机克隆 Git 的 clone 命令会为你自动将远程主机命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。同时Git 也会给你一个与 origin 的maste</description>
    </item>
    
    <item>
      <title>js IIFE简介</title>
      <link>https://tomtomyoung.top/post/js-iife%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-iife%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 场景 下面这个面试题你大概率遇到过： 1for (var i = 0; i &amp;lt; 5; i++) { 2 setTimeout(() =&amp;gt; { 3 console.log(i); 4 }, 10); 5} 这里var会声明一个全局变量i。函数会在10毫秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时循</description>
    </item>
    
    <item>
      <title>浏览器 浏览器多进程/js单线程</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8Bjs%E5%8D%95%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8Bjs%E5%8D%95%E7%BA%BF%E7%A8%8B/</guid>
      <description>windows打开任务管理器，可以看到后台进程列表。可以看到每个进程的内存资源信息以及cpu占有率。 所以，应该更容易理解了：进程是cpu资源分配的最小单位（系统会给它分配内存） 最后，再用较为官方的术语</description>
    </item>
    
    <item>
      <title>js webpack简介</title>
      <link>https://tomtomyoung.top/post/js-webpack%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-webpack%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 为什么使用webpack 1. 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方法： 引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载大量脚本会导致网络瓶颈。 使用一个包</description>
    </item>
    
    <item>
      <title>css vh&amp;vw</title>
      <link>https://tomtomyoung.top/post/css-vhvw/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/css-vhvw/</guid>
      <description>1. vw vh的介绍 vw,vh是css3中给我们提供的新的单位，他们是相对于viewport视窗的宽高进行计算的单位。说白了，就是相对于浏览器的窗口的大小。 vw : 1vw 等于视口宽度的1% vh : 1vh 等于视口高度的1% vmin</description>
    </item>
    
    <item>
      <title>js 正则表达式</title>
      <link>https://tomtomyoung.top/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的&amp;quot;hello&amp;quot;这个子串。 1var regex = /hello/; 2console.log( regex.test(&amp;#34;hello&amp;#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而模糊</description>
    </item>
    
    <item>
      <title>ssr&amp;csr</title>
      <link>https://tomtomyoung.top/post/ssrcsr/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ssrcsr/</guid>
      <description>1. SSR和CSR的概念 SSR(Server Side Rendering)： SSR是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染</description>
    </item>
    
    <item>
      <title>ajax 预检请求</title>
      <link>https://tomtomyoung.top/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</guid>
      <description>1.什么是预检请求 定义：预检请求（Preflighted requests ）是浏览器发起跨域请求时，通过OPTIONS方法询问服务器对跨域请求的支持情况（支持的包含请求方法、请求头、数据类型）。 2.什么时候会触发预检</description>
    </item>
    
  </channel>
</rss>
