[{"content":"1. Obsidian obsidian属于","lvl0":"使用Obsidian代替Typora作为博客写作软件","lvl1":["博客"],"lvl2":"摘要","objectID":"622d08b75471583c2926d1e1cb9c8541","tags":["obsidian"],"url":"https://tomtomyoung.top/post/%E4%BD%BF%E7%94%A8obsidian%E4%BB%A3%E6%9B%BFtypora%E4%BD%9C%E4%B8%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E8%BD%AF%E4%BB%B6/"},{"content":"1. 变量与数据类型 1. 声明变量 在 js 中变量是不区分类型的，这一点在 ts 中做出了改变，ts 规定变量在声明时必须规定好这个变量的数据类型，并以 : 的形式进行指定。 2. 数据类型 JavaScript 的类型分为两种：原始数据类型（Primi","lvl0":"ts 基础语法","lvl1":["前端"],"lvl2":"摘要","objectID":"98b68fb55d749e90cefc1de070803da5","tags":["ts"],"url":"https://tomtomyoung.top/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"},{"content":"参考： apt 和 apt-get 的区别（建议使用 apt） Ubuntu 16.04 发布时，一个引人注目的新特性便是 apt 命令的引入。其实早在 2014 年，apt 命令就已经发布了第一个稳定版，只是直到 2016 年的 Ubuntu 16.04 系统发布时才开始引人关注。 随着 apt install package 命令的使用","lvl0":"apt与apt-get的区别","lvl1":["linux"],"lvl2":"摘要","objectID":"aa1cda4532b0daa9f5ca61a21b3f0086","tags":["apt"],"url":"https://tomtomyoung.top/post/apt%E4%B8%8Eapt-get%E7%9A%84%E5%8C%BA%E5%88%AB/"},{"content":"参考： 前端现代包管理器的进化史 【前端工程化】篇二 白璧微瑕：包管理器 前端包管理器争端，只不过是构建工具的牙缝菜 新一代包管理工具 pnpm 1. 包\u0026amp;包管理器 在很久很久以前，前端叫做“切图仔”，那时前端的工作非","lvl0":"关于js包管理器研究","lvl1":["前端"],"lvl2":"摘要","objectID":"c5c18eb001e0503d6b42c113d07589f1","tags":["js","包管理器"],"url":"https://tomtomyoung.top/post/%E5%85%B3%E4%BA%8Ejs%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E7%A0%94%E7%A9%B6/"},{"content":"参考： 简单实现 Google Fonts 的异步加载 MDN_Web 字体 MDN_font-family 中文网页字体设置方案：从 font-family 到 font-display 加载 Web Fonts 最佳实践 真正了解 CSS3 背景下的@font face 规则 HTML5 之 Link 标签 MDN_link 為什麼你們就是不能加個空格呢？ 写作好习惯之「盘古之白」 字体无处不在，无论","lvl0":"关于字体的研究","lvl1":["前端"],"lvl2":"摘要","objectID":"c5d4ea4c70c57537c3e12580be19d84a","tags":["字体","css"],"url":"https://tomtomyoung.top/post/%E5%85%B3%E4%BA%8E%E5%AD%97%E4%BD%93%E7%9A%84%E7%A0%94%E7%A9%B6/"},{"content":"参考： https://www.openssh.com/ https://man.openbsd.org/ssh.1 SSH 原理和基本应用 SSH 简介及两种远程登录的方法 ssh 基本原理，口令登陆和秘钥（免密）登陆 1. SSH 协议简介 1. 定义 Secure Shell（安全外壳协议，简称 SSH）是一种加密的 网络传输协议 ，可在不安全的网络中为网络服","lvl0":"使用vscode进行远程开发","lvl1":["前端"],"lvl2":"摘要","objectID":"834f6500d3501c1cbfd22deebeb9cad5","tags":["vscode"],"url":"https://tomtomyoung.top/post/%E4%BD%BF%E7%94%A8vscode%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91/"},{"content":"tailwindcss 官网 Facebook 重构：抛弃 Sass / Less ，迎接原子化 CSS 时代 Atomic CSS-in-JS get bem Tailwind CSS （可能）是名过其实的 Vjeux css in js 1. CSS 发展历程 CSS 发展到现在，基本经历了三个阶段，如下所示： 1. 原生写法 是类似于编程中面向过程的写法，需要什么样式，自己在 css","lvl0":"tailwind 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"d8a26d417a3ad4c6aa111b11fc066eb7","tags":["tailwind"],"url":"https://tomtomyoung.top/post/tailwind-%E7%AE%80%E4%BB%8B/"},{"content":"参考： MDN_渐进式 Web 应用（PWA） 小程序的老祖宗 PWA 为什么没有火起来？ 被微信小程序山寨的 PWA 到底是什么鬼？ web.dev_Learn PWA! Responsive design 和 Adaptive design 的区别？ 我们真的需要网页版 App 吗？Google PWA 的困局 Web Fundamentals MDN_Cache 1. 什么是 PWA? PWA（Pro","lvl0":"PWA 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"5c57efa4bcbada0b2166dce6b88754be","tags":["PWA"],"url":"https://tomtomyoung.top/post/pwa-%E7%AE%80%E4%BB%8B/"},{"content":"参考： 阮一峰——测试框架 Mocha 实例教程 jest 官网 TDD 和 BDD 的区别 Testing Vue.js Applications 1. 测试的必要性 对于稍微有一些开发经验的同学在开发过程中总会经历下面类似的问题： 每次在版本发布上线之前，在电脑前蹲上好几个小时甚至是更长时间对你","lvl0":"vue 单元测试","lvl1":["前端"],"lvl2":"摘要","objectID":"882b8b94edbb63244f6ada94ccb4820a","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"content":"参考： WebAssembly浏览器内，javascript之外的速度 1. 定义 WebAssembly 官网的定义是： WebAssembly 或者 wasm 是一个可移植、体积小、加载快并且兼容 Web 的全新格式 WebAssembly 是基于栈式虚拟机的二进制指令集，可以作为编程语言的编","lvl0":"WebAssembly 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"393d6890a5ece684b1ee6b8a0f83e029","tags":["WebAssembly"],"url":"https://tomtomyoung.top/post/webassembly-%E7%AE%80%E4%BB%8B/"},{"content":"参考： 微前端-最容易看懂的微前端知识 extending the microservice idea to frontend development Sites vs. Apps defined: the Documents‐to‐Applications Continuum. Micro­service Websites Microfrontends: the good, the bad, and the ugly Micro Frontends —— Cam Jackson 微前端入门 1. 现代 Web App Aral Balkan 曾经在一","lvl0":"微前端 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"8ba6683ee476e59d248b61ee5a611b4d","tags":["微前端"],"url":"https://tomtomyoung.top/post/%E5%BE%AE%E5%89%8D%E7%AB%AF-%E7%AE%80%E4%BB%8B/"},{"content":"参考： MDN_WebSocket WebSocket 教程 1. WebSocket 应用场景 WebSocket 的特点： 在客户端与服务端之间建立起平等的连接，任何一方都可以发起请求； WebSocket 不受同源策略的限制； ws 、wss 分别对应的是 80、443。 在 Vue 中使用 WebSocket ： 1\u0026lt;template\u0026gt; 2 \u0026lt;div\u0026gt; 3 \u0026lt;h1\u0026gt;使","lvl0":"计算机网络 WebSocket详解","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"ce8032b1121c08c7c1101ae046a8c20c","tags":["WebSocket"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-websocket%E8%AF%A6%E8%A7%A3/"},{"content":"参考： uri 和 url 的区别与联系（一看就理解） URI、URL 和 URN 有什么区别？ What is the difference between a URI, a URL and a URN? URI 统一资源标志符(Uniform Resource Identifier， URI)，表示的是 web 上每一种可用的资源，如 HTML 文档、图","lvl0":"计算机网络 URI\u0026URL\u0026URN","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"e7cc0514e69e11b06eea2cbdec85cfea","tags":["URL"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-uriurlurn/"},{"content":"参考： web 前端面试 - 面试官系列 HTTP/1.x 的连接管理 对比 HTTP1.1 和 HTTP2.0 1. HTTP 1.0 HTTP 1.0 是一种无状态，无连接的应用层协议。 HTTP 1.0 规定浏览器和服务器保持短暂的链接。 HTTP 属于 TCP/IP 模型中的应用层协议，而两个应用程序（我们这里指的就是浏览器与","lvl0":"计算机网络 HTTP1.0HTTP1.1HTTP2.0对比","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"4f58584d026b0661b4e330708ab1af09","tags":["HTTP"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http1.0http1.1http2.0%E5%AF%B9%E6%AF%94/"},{"content":"参考： java 加密算法入门（三）-非对称加密详解 数字签名、数字证书与 HTTPS 是什么关系？ 中间人攻击，HTTPS 也可以被碾压 数字签名是什么？ 对称加密、非对称加密、摘要、数字签名、数字证书 数字签名-如何做到消息不可篡","lvl0":"计算机网络 HTTPS详解","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"2bf1633e3b6373b4dc88c597a2145be8","tags":["HTTPS"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-https%E8%AF%A6%E8%A7%A3/"},{"content":"参考： TCP 详解 TCP 为什么要三次握手？ TCP 协议详解（一）：TCP 头部结构 1. TCP 定义 TCP(Transmission Control Protocol 传输控制协议)是一种基于连接的、点对点的、 面向字节流的、基于 IP 的传输层协议。TCP 在 IP 报文的协议号是 6。 1. 基于连接 TCP 是 面向","lvl0":"计算机网络 TCP详解","lvl1":["计算机网络"],"lvl2":"摘要","objectID":"d5700d5c2bd783feecb99816c1bb93e1","tags":["TCP"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-tcp%E8%AF%A6%E8%A7%A3/"},{"content":"参考： 走进 React Fiber 的世界 手写 React 的 Fiber 架构，深入理解其原理 1. 背景 在之前的《react react 时间切片与 requestIdleCallback 详解》中，我们了解到 React 为了解决浏览器性能瓶颈，提出了时间切片的机制，将大任务拆分为小任务分别执行。 那么我们就不","lvl0":"react Fiber详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"402965986bb9ca09a6466aa00cdd6bb8","tags":["react"],"url":"https://tomtomyoung.top/post/react-fiber%E8%AF%A6%E8%A7%A3/"},{"content":"参考： 8 月更文挑战｜react 手写实现渲染 JSX 普通版 手写一个简单的 React 手写一个 react 系列（一）：实现 react 和 react-dom 手写 react 核心源码 面试装不了逼？当场手写个 react16.x 框架给他看看 1. 搭建项目 1. 初始化项目 我们需要初始化一个空的 webpack 项目","lvl0":"react 手写react16.x组件渲染","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"7b9067711c1f76e7e792f0af13a0c3f5","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E6%89%8B%E5%86%99react16.x%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/"},{"content":"参考： 走进 React Fiber 的世界 1. 浏览器性能瓶颈 我们日常使用 App，浏览网页时，有两类场景会制约快速响应： 当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。 发送网络请求后，由于需要等待数据返回才能进一步操","lvl0":"react 时间切片与requestIdleCallback详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"592dcc609363dcea760bbe6b4aebaa72","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E4%B8%8Erequestidlecallback%E8%AF%A6%E8%A7%A3/"},{"content":"参考： React 躬行记（1）——函数式编程 React 世界的函数式编程(Functional Programming) 1. 函数式编程定义 函数式编程（Functional Programming）不是一种新的框架或工具，而是一种以函数为主的编程范式","lvl0":"react 函数式编程范式","lvl1":["前端"],"lvl2":"摘要","objectID":"26c2f02f9557e7aec97211a295ba128d","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"},{"content":"参考： React 函数组件详解 hooks 和类组件的区别 为什么 React 现在要推行函数式组件，用 class 不好吗？ 谈谈 react hooks 的优缺点 React Hooks 详解 React 中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return \u0026lt;h1\u0026gt;函数式\u0026lt;/h1\u0026gt; 3}","lvl0":"react 函数组件详解","lvl1":["前端"],"lvl2":"摘要","objectID":"42d8b00065446d1d6371eca96c815af0","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_Class 1. 声明类 1class Rectangle { 2 constructor(height, width) { 3 this.height = height; 4 this.width = width; 5 } 6} 函数声明和类声明之间的一个重要区别在于，函数声明会提升，类声明不会。你首先需要声明你的类，然后再访问它，否则类似以下的代码将抛出 ReferenceError ： 1let p = new Rectangle(); // ReferenceError 2","lvl0":"js Class详解","lvl1":["前端"],"lvl2":"摘要","objectID":"686a527716cb940ff561826fa14e23f2","tags":["js","原型链"],"url":"https://tomtomyoung.top/post/js-class%E8%AF%A6%E8%A7%A3/"},{"content":"参考： react 中文文档_JSX 简介 React 之技术详解（三）- 深入理解 JSX 手写 react 核心源码 配置 babel-loader 处理 JSX 语法 1. 什么是 JSX 设想如下变量声明： 1const element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; 这个语法既不是字符串也不是 HTML，而是 React 独有的 JSX 语法。 JSX 全程是 JavaScript XML，","lvl0":"react JSX详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"0c374809b69a58030d1e47beb6249a18","tags":["react"],"url":"https://tomtomyoung.top/post/react-jsx%E8%AF%A6%E8%A7%A3/"},{"content":"参考： React Native 中文网 React Native 介绍 深入理解 react-native Metro_Docs react-native metro 分析 react-native bundle 到 bundle 生成到底发生了什么(metro 打包流程简析) JavaScriptCore 深入浅出 JavaScriptCore React Native、React 和 JavascriptCore 的关系 1. React Native 1. 定义 要了解 RN，肯定是要从官网入手： 按照官网的介","lvl0":"react_native 简介","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"a467dded2d00d2bff0f8b1339f113caa","tags":["react_native"],"url":"https://tomtomyoung.top/post/react_native-%E7%AE%80%E4%BB%8B/"},{"content":"参考： Vue.js_深入响应式原理 Vue 源码分析之实现一个简易版的 Vue DMQ/mvvm vue 源码解读（一）Observer/Dep/Watcher 是如何实现数据绑定的 Observer、Dep、Watcher 傻傻搞不清楚 1. 双向","lvl0":"vue 手写数据双向绑定","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"d76fa69b78d8c7393f066ac6092f80cd","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"},{"content":"参考： Vue_doc Vue 和 React 的优点分别是什么？ (vue) =\u0026gt; {渐进式} Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？ The Progressive Framework by Evan You 1. Vue 是什么 这一点，Vue 的官网说的很清楚： 一句话来说，一套用于构建用户界面的","lvl0":"vue 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"6c1cdd851edd9fa0ab0e5197deba8ded","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E7%AE%80%E4%BB%8B/"},{"content":"参考： MDN_Array Array 是一个构造函数，是用于构造数组的全局对象。 1. 构造 Array 实例 1[element0, element1, ..., elementN] 2new Array(element0, element1, ..., elementN) 3new Array(arrayLength) 2. 访问数组 1var arr = [\u0026#39;this is the first element\u0026#39;, \u0026#39;this is the second element\u0026#39;, \u0026#39;this is the last element\u0026#39;]; 2console.log(arr[0]); // 打印 \u0026#39;this is the first element\u0026#39; 3console.log(arr[1]); // 打印 \u0026#39;this is the second element\u0026#39; 4console.log(arr[arr.length - 1]); // 打印 \u0026#39;this is the last element\u0026#39; 3. Array 数组构","lvl0":"js Array详解","lvl1":["前端"],"lvl2":"摘要","objectID":"3b6061923b91647ce6b5dc1d77dfb7dc","tags":["js"],"url":"https://tomtomyoung.top/post/js-array%E8%AF%A6%E8%A7%A3/"},{"content":"参考： VirtualDOM 与 diff( Vue 实现) 1. VNode 在刀耕火种的年代，我们需要在各个事件方法中直接操作 DOM 来达到修改视图的目的。但是当应用一大就会变得难以维护。 那我们是不是可以把真实 DOM 树抽象成一棵以 JavaScript 对象构成的抽象树，在修改抽象树","lvl0":"vue vdom与diff详解","lvl1":["前端"],"lvl2":"摘要","objectID":"c715f9095019cc492afe2d41ec3bb59e","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-vdom%E4%B8%8Ediff%E8%AF%A6%E8%A7%A3/"},{"content":"参考： Vue.js_深入响应式原理 Vue 源码分析之实现一个简易版的 Vue DMQ/mvvm 1. 数据劫持原理 关于如何实现数据劫持，在 Vue 的官网有一段描述： Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而","lvl0":"vue 数据劫持详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"a26d3abb9854623a525eef70b2676258","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MVC，MVP 和 MVVM 的图示 浅谈 MVC、MVP 和 MVVM 架构模式 架构模式：MVC 与 MVVM 结合 vue、react、angular 谈谈 MVC、MVP、MVVM 框架 1. 架构模式 MVC 和 MVVM 都是架构模式！ MVC 描述了「Model","lvl0":"MVC与MVVM详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"33b8c24ee6320daa071ee618efc4b1f1","tags":["MVC","MVVM"],"url":"https://tomtomyoung.top/post/mvc%E4%B8%8Emvvm%E8%AF%A6%E8%A7%A3/"},{"content":"参考： React_doc React 的特点和优势 Vue 和 React 的优点分别是什么？ React 技术解密笔记——理念篇 1. React 是什么 React 是一个用于构建用户界面的 JavaScript 库。 使用 React 可以将一些独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。 2. React 解决的","lvl0":"react 简介","lvl1":["前端"],"lvl2":"摘要","objectID":"f1b0c5b8ef0a1b94be27c07e5dac9ed2","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E7%AE%80%E4%BB%8B/"},{"content":"参考： MDN_Object MDN_Function 1. Object 在 JavaScript 中，几乎所有的对象都是 Object 类型的实例，它们都会从 Object.prototype 继承属性和方法。Object 构造函数为给定值创建一个对象包装器。Object 构造函数，会根据给定的参数创建对象，具体有以下情况： 如果给","lvl0":"js Object与Function详解","lvl1":["前端"],"lvl2":"摘要","objectID":"a5e464f6a6d7c34f16e0ccd7cf693141","tags":["js"],"url":"https://tomtomyoung.top/post/js-object%E4%B8%8Efunction%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_JavaScript 中的继承 js 继承的几种方式 Javascript 继承机制的设计思想 Javascript – How Prototypal Inheritance really works javascript 中实现继承的六种方式 ES6 里 Class 的 Extends 继承原理 有些人认为 JavaScript 并不是真正的面向对象语言，在经典的面向对象语言中，您可能倾向于定义类对象，然后您可","lvl0":"js 类与继承详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"1e88acc655c07a43265c9b51f3ff262a","tags":["js","原型链"],"url":"https://tomtomyoung.top/post/js-%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/"},{"content":"参考： 浅谈浏览器渲染、回流和重绘 渲染树构建、布局及绘制 尽可能减少浏览器重排 1. 页面渲染 根据《浏览器 页面渲染详解》，我们可以知道浏览器渲染页面分为以下几步： 处理 HTML 标记并构建 DOM 树。 处理 CSS 标记并构建 CSSOM 树。 将 DOM","lvl0":"浏览器 回流与重绘详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"45e8997024c0f8ab1ccf18f5f4766cda","tags":["浏览器"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%E8%AF%A6%E8%A7%A3/"},{"content":"参考： 渲染树构建、布局及绘制 构建对象模型 浏览器渲染页面前需要先构建 DOM 和 CSSOM 树。因此，我们需要确保尽快将 HTML 和 CSS 都提供给浏览器。 1. DOM 字节 → 字符 → 令牌 → 节点 → 对象模型。 HTML 标记转换成文档对象模型 (DOM)；CS","lvl0":"浏览器 页面渲染详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"e6aa3ad60cdbd92aced6fe2b48e6e727","tags":["浏览器"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_new js 中关键字 new 的原理（含实现代码） 1. new new 会实例化类的实例对象，或者说，使用构造函数，构造一个我们想要的对象。 关于类的定义有两种，使用构造函数定义的类，使用 Class 关键字定义的类。 1. 构造函数定义类 在 MDN 中","lvl0":"js new详解","lvl1":["前端"],"lvl2":"摘要","objectID":"d3c104eff74cb18e2a0f40e39c178336","tags":["js","原型链"],"url":"https://tomtomyoung.top/post/js-new%E8%AF%A6%E8%A7%A3/"},{"content":"参考： js 对象(一)——创建对象 js 对象（二）—— 函数与对象的关系（认识原型链） 一张图搞定 JS 原型\u0026amp;原型链 js 的初学者一般很难理解原型和原型链的概念，但原型和原型链又是 js 中最重要的点之一，关系到对 js 所","lvl0":"js 原型与原型链详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"4be9698f6e5aa1a41c1a7a3402eedd7a","tags":["js","原型链"],"url":"https://tomtomyoung.top/post/js-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AF%A6%E8%A7%A3/"},{"content":"参考： ES6 module 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的 require、Python 的 im","lvl0":"js ES6_module详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"80b8e2af5686276d0a736c523e71a7b3","tags":["js","模块化","ES6"],"url":"https://tomtomyoung.top/post/js-es6_module%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_this JavaScript 的 this 原理 彻底理解 js 中 this 的指向，不必硬背。 1. 定义 this 与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在 严格模式 和非严格模式之间也会有一些差别。 在绝大多数情况下，函数的调用方式决定了 this 的","lvl0":"js this详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"b2a13a10914d5b061e540ecab7b38bbf","tags":["js","作用域"],"url":"https://tomtomyoung.top/post/js-this%E8%AF%A6%E8%A7%A3/"},{"content":"参考： umd.js 可能是最详细的 UMD 模块入门指南 1. UMD 因为有像 CommonJS、AMD、CMD 等不同的规范，导致了 js 实现模块化有很多方式，那有没有一种方式可以屏蔽掉这种不同，让我们不去思考使用什么模块化规范，专心的","lvl0":"js umd详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"3de51141be62de1f82b7b7d4c7fdd6f7","tags":["js","模块化"],"url":"https://tomtomyoung.top/post/js-umd%E8%AF%A6%E8%A7%A3/"},{"content":"参考： 前端模块化：CommonJS,AMD,CMD,ES6 wikipedia_CommonJS 深入浅出 Node.js 前端科普系列-CommonJS：不是前端却革命了前端 从 CommonJS 到 Sea.js CommonJS wiki mozillaWiki_ServerJS 《编程时间简史系列》JavaScript 模块化的历史进程 Node.js_CommonJS modules RequireJS 和","lvl0":"js 模块化详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"6192c332753f3c85527c0bccd13c5cf0","tags":["js","模块化"],"url":"https://tomtomyoung.top/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_闭包 你不懂 JS：作用域与闭包 学习 Javascript 闭包（Closure） 在 JavaScript 中闭包无所不在，你必须识别并接纳它。 闭包是词法作用域导致的结果。闭包在你的代码中一直在被创建和使用，你在毫无意识的状态下就使用","lvl0":"js 闭包详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"5691d6ad1e1ef7ef2a877a7663e336a9","tags":["js","作用域"],"url":"https://tomtomyoung.top/post/js-%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN_let 为什么在 JavaScript 中为块范围变量声明选择名称“let”？ let 深入理解\u0026mdash;let 存在变量提升吗？ 我用了两个月的时间才理解 let JS 变量封禁大法：薛定谔的 X let 声明会提升（hoist）吗？ 1. 作用域对 var 的处","lvl0":"js let\u0026const与块级作用域","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"5f91eccc8624cf7e6b100ee491d4240d","tags":["js"],"url":"https://tomtomyoung.top/post/js-letconst%E4%B8%8E%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"content":"参考： MDN Scope 深入理解 javascript 作用域系列第一篇——内部原理 深入理解 javascript 作用域系列第二篇——词法作用域和动态作用域 你不懂 JS：作用域与闭包 let, const 和块级作用域 1. 作用域 第一种说法： javascript 拥有一套设计良好的规则来存储变量，并且","lvl0":"js 作用域\u0026作用域链","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"32328ec306c947f6fe7045abf6d04b9e","tags":["js","作用域"],"url":"https://tomtomyoung.top/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"},{"content":"参考： 编译语言和解释语言的区别 编译器与解释器 JavaScript 的工作原理：解析、抽象语法树（AST）+ 提升编译速度 5 个技巧 IBM compiled-versus-interpreted-languages JavaScript 编译 - JIT (just-in-time) compiler 是怎么工作的 WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作原理 JS - AST 基本概念 JS AST 原","lvl0":"js 代码解释执行详解","lvl1":["前端"],"lvl2":"摘要","objectID":"0bee2a896256c04199b3af1f3e4e9fcb","tags":["js","作用域"],"url":"https://tomtomyoung.top/post/js-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%AF%A6%E8%A7%A3/"},{"content":"1. 为什么需要 Symbol 对象在 JavaScript 语言中扮演重要角色，它们的使用无处不在。对象通常用作键/值对的集合，然而，以这种方式使用它们有一个很大的限制: 在 symbol 出现之前，对象键只能是字符串，如果试图使用非字符串值作为对象的键","lvl0":"js Symbol详解","lvl1":["前端"],"lvl2":"摘要","objectID":"12f9cf7981dc2f14f005c23f68425e57","tags":["js"],"url":"https://tomtomyoung.top/post/js-symbol%E8%AF%A6%E8%A7%A3/"},{"content":"1. Set 定义 Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 2. Set 中的特殊值 Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待： +0 与 -0 在存储判断唯一性的时候是恒等的","lvl0":"js Set详解","lvl1":["前端"],"lvl2":"摘要","objectID":"abaf7e7ff9e4683014be907de912cd78","tags":["js"],"url":"https://tomtomyoung.top/post/js-set%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN HTTP/Caching MDN Cache-Control MDN Expires MDN ETag MDN If-None-Match 彻底弄懂 HTTP 缓存机制及原理 5 分钟看懂系列：HTTP 缓存机制详解 1. 什么是 HTTP 缓存 通过复用以前获取的资源，可以显著提高网站和应用程序的性能。 HTTP 缓存减少了等待时间和网络流量，因此减少了","lvl0":"计算机网络 HTTP缓存详解","lvl1":["计算机网络","精选"],"lvl2":"摘要","objectID":"ec6f14d0e3ac170a38e3dc1959d7cbae","tags":["HTTP"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN http 1. HTTP HTTP (HyperText Transfer Protocol)，即超文本传输协议，是实现网络通信的一种规范。 1. HTTP 报文 HTTP 消息是服务器和客户端之间交换数据的方式。有两种类型的消息︰ 请求（requests）\u0026ndash;由客户端发","lvl0":"计算机网络 HTTP请求与响应详解","lvl1":["计算机网络","精选"],"lvl2":"摘要","objectID":"d36aa3753c7e40f6247b272fe54baa5a","tags":["HTTP"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%AF%A6%E8%A7%A3/"},{"content":"参考： MDN DNS DNS 原理入门 what-is-dns 工程师最容易搞错的域名知识 域名层级划分 域名分级与域名解析过程(DNS) 1. 域名 1. 域名的层级 根域名 .root 对于所有域名都是一样的，所以平时是省略的； 根服务器主要用来管理互联网的主目录； 全世","lvl0":"计算计网络 域名与DNS详解","lvl1":["计算机网络","精选"],"lvl2":"摘要","objectID":"828d35fbd6924626d2062aa822679a29","tags":["DNS"],"url":"https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E8%AE%A1%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E4%B8%8Edns%E8%AF%A6%E8%A7%A3/"},{"content":"ES6 标准新增了一种新的函数：Arrow Function（箭头函数）。 1. 定义 为什么叫 Arrow Function？因为它的定义用的就是一个箭头： 1x =\u0026gt; x * x 上面的箭头函数相当于： 1function (x) { 2 return x * x; 3} 箭头函数相当于匿名函","lvl0":"js 箭头函数详解","lvl1":["前端"],"lvl2":"摘要","objectID":"58133c32c52d490afa41c3866abe946d","tags":["js"],"url":"https://tomtomyoung.top/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"},{"content":"React 中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return \u0026lt;h1\u0026gt;函数式\u0026lt;/h1\u0026gt; 3} 类定义组件 1class Welcome extends React.Component { 2 render() { 3 return \u0026lt;h1\u0026gt;类式\u0026lt;/h1\u0026gt;; 4 } 5} 我们来主要研究类组","lvl0":"react 类组件详解","lvl1":["前端"],"lvl2":"摘要","objectID":"8a77d7479ceeff4d7cff661785384071","tags":["react"],"url":"https://tomtomyoung.top/post/react-%E7%B1%BB%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/"},{"content":"1. 简易版 Promise 1. 实现 executor 比如我们实例化一个 Promise 对象时，会这样写： 1let p1 = new Promise((resolve, reject) =\u0026gt; { 2 resolve(12345); 3}) 这里要注意的是： constructor 接收一个函数作为参数； 这个传入的函数会在实例化时（执行构造函数时）立即执行； 传入的函数接收两个函数（re","lvl0":"手写实现Promise","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"0ac2e65625420178ee137bc3a2628bf6","tags":["js","promise"],"url":"https://tomtomyoung.top/post/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0promise/"},{"content":"1. 基本概念 Cookie Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为 4KB 左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的","lvl0":"浏览器 本地存储详解","lvl1":["前端"],"lvl2":"摘要","objectID":"2bf543553f5e783c2839e63643519e08","tags":["浏览器"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3/"},{"content":"1. Map 定义 MDN map Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值都可以作为一个键或一个值。 map 和 object 的对比 Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（并且也没有其他","lvl0":"js Map详解","lvl1":["前端"],"lvl2":"摘要","objectID":"f37371ef5ec2a827eb8c1d2dd7cb164c","tags":["js"],"url":"https://tomtomyoung.top/post/js-map%E8%AF%A6%E8%A7%A3/"},{"content":"1：什么是 XSS 攻击？ XSS，即 Cross Site Script，跨站脚本攻击； XSS 攻击是指攻击者在网站上注入恶意的客户端代码，对客户端网页进行篡改，对用户浏览器进行控制或者获取用户隐私数据； XSS 攻击可以分为 3 类：反射型（非","lvl0":"浏览器 xss\u0026csrf","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"80926b4f519ed27b5580fa64b1997bc8","tags":["浏览器","xss","csrf"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/"},{"content":"1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise 表示异步操作的最终结果。与 promise 交互的主要方式是通过它的 then 方法，该方法注册回调来接收 promise 的最","lvl0":"js Promise详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"ac75ad887b20c814d198af42daff45fa","tags":["js","Promise"],"url":"https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/"},{"content":"1. setTimeout setTimeout 的在一段时间之后，执行指定的一段函数 （仅执行一次） 可以理解为指定延迟后执行函数 2. setInterval setInterval 是循环执行函数，每隔一段时间就执行一次指定的函数（执行 N 次） 可以理解为指定周期执行函数 3. 两者区别 两个函数的另一","lvl0":"js setTimeout\u0026setInterval","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"6b701ecf5a40130d888eeae379ca1e6c","tags":["js"],"url":"https://tomtomyoung.top/post/js-settimeoutsetinterval/"},{"content":"参考： The JavaScript Event Loop: Explained ES2015(ES6) MDN_并发模型与事件循环 MDN_深入：微任务和 JavaScript 运行时环境 MDN_在 JavaScript 中通过 queueMicrotask() 使用微任务 Node.js_event_loop WHATWG 规范_event_loop JavaScript Info_event-loop 宏任务和微任务到底是什么？ JavaScript 运行机制详解：再谈 Event Loop 事件循环","lvl0":"js 事件循环与异步并发","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"b809d478b36c4f28299d2f78636ba756","tags":["js"],"url":"https://tomtomyoung.top/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/"},{"content":"1. husky5.x 使用总结 husky 可以让我们向项目中方便添加 git hooks。通常情况下只需要如下两步就可在项目中引入并设置好 husky： 将 husky 添加到项目的开发依赖中 1npm install -D husky 在 package.json 中设置我们需要的 git hooks 1{ 2 \u0026#34;husky\u0026#34;: { 3 \u0026#34;hooks\u0026#34;: { 4 \u0026#34;pre-commit\u0026#34;: \u0026#34;npm run test\u0026#34;, // 在","lvl0":"git husky简介","lvl1":["前端"],"lvl2":"摘要","objectID":"87f5635d5fa92e77823e5897467d8aad","tags":["git"],"url":"https://tomtomyoung.top/post/git-husky%E7%AE%80%E4%BB%8B/"},{"content":"事件循环机制解析 当 Node.js 启动后，它会初始化事件循环，处理已提供的输入脚本（或丢入 REPL ，本文不涉及到），它可能会调用一些异步的 API、调度定时器，或者调用 process.nextTick()，然后开始处理事件","lvl0":"nodejs中的事件循环","lvl1":["前端"],"lvl2":"摘要","objectID":"e1ac5cfe7d61b4da62dbdb6c1a408f4e","tags":["nodejs"],"url":"https://tomtomyoung.top/post/nodejs%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"},{"content":"1. jacascript JavaScript 和 ECMAScript 通常被人用来表达相同的意思，但 JavaScript 的含义去比 ECMA-262 中规定的多得多。一个完整的 JavaScript 实现应由三个部分组成： 核心（ECMAScript） 文档对象模型（DOM） 浏览器对象模型（BOM） 1. ECMAScript 由 ECMA-262 定义的 ECMAScript 是一种","lvl0":"nodejs与js的关系","lvl1":["前端"],"lvl2":"摘要","objectID":"c7d2971e938ec5961894f5e8f3ce82fe","tags":["nodejs"],"url":"https://tomtomyoung.top/post/nodejs%E4%B8%8Ejs%E7%9A%84%E5%85%B3%E7%B3%BB/"},{"content":"切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分","lvl0":"git 分支的新建与合并","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"66dbd977bfa50d55ab3c9d82b1c78095","tags":["git"],"url":"https://tomtomyoung.top/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/"},{"content":"1. 仓库操作 1. 初始化配置 1git config -global user.name \u0026lt;name\u0026gt; #设置提交者名字 2git config -global user.email \u0026lt;email\u0026gt; #设置提交者邮箱 3git config -global core.editor \u0026lt;editor\u0026gt; #设置默认文本编辑器 4git config -global merge.tool \u0026lt;tool\u0026gt; #设置解决合并冲突时差异分析工具 5git config -list #检查已有的配置信息 2. 创建本地仓库 1git init #初始化本","lvl0":"git 家族式命令","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"1fbeeaf7319f5d083928a2126d14a9c8","tags":["git"],"url":"https://tomtomyoung.top/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/"},{"content":"1. 克隆远程仓库到本地 Git 的 clone 命令会为你自动将远程主机命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。同时 Git 也会给你一个与 origin 的 master 分支在指","lvl0":"git 远程仓库与本地仓库","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"3ddfcd579d272dae9a5223f4874c476f","tags":["git"],"url":"https://tomtomyoung.top/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"},{"content":"1. 场景 下面这个面试题你大概率遇到过： 1for (var i = 0; i \u0026lt; 5; i++) { 2 setTimeout(() =\u0026gt; { 3 console.log(i); 4 }, 10); 5} 这里 var 会声明一个全局变量 i。函数会在 10 毫秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时循环已经","lvl0":"js IIFE简介","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"74183de2f915e3008f31153b71e2c964","tags":["js"],"url":"https://tomtomyoung.top/post/js-iife%E7%AE%80%E4%BB%8B/"},{"content":"1. 进程与线程 windows 打开任务管理器，可以看到后台进程列表。可以看到每个进程的内存资源信息以及 cpu 占有率。 所以，应该更容易理解了：进程是 cpu 资源分配的最小单位（系统会给它分配内存） 最后，再用较为官方的术语描述一遍","lvl0":"浏览器 多进程详解","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"8c804fc092232a50a8ab13364cf7c7e8","tags":["浏览器"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%AF%A6%E8%A7%A3/"},{"content":"1. 为什么使用 webpack 1. 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方法： 引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载大量脚本会导致网络瓶颈。 使用一个包含所有项目代","lvl0":"js webpack简介","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"4d0574d519b91cc54b6d9c231fbd3f50","tags":["js","模块化"],"url":"https://tomtomyoung.top/post/js-webpack%E7%AE%80%E4%BB%8B/"},{"content":"1. 编辑器操作 ctrl+shift+n 打开新的编辑器窗口 ctrl+shiift+w 关闭当前编辑器窗口 f11 全屏显示 2. 文件操作 ctrl+tab 在打开的文件之间进行切换 ctrl+n 新建文件 ctrl+w 关闭当前文件窗口 ctrl+\\ 切出一个新的文件窗口 ctrl+alt+→/← 将当前文件切到新窗口 3. 光标移","lvl0":"vscode常用快捷键","lvl1":["前端"],"lvl2":"摘要","objectID":"3fe87b6446c711861e5c6ce5428df700","tags":["vscode"],"url":"https://tomtomyoung.top/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"},{"content":"console.assert(expression, object) 级别：Error expression 评估为 false 时，将 object 写入控制台。 1const x = 5; 2const y = 3; 3const reason = \u0026#39;x is expected to be less than y\u0026#39;; 4console.assert(x \u0026lt; y, {x, y, reason}); console.clear() 清空控制台 1console.clear(); 如果启用了 Preserve Log，console.clear() 会被禁用。 console.debug() 级别：Verbose console.log(object [,","lvl0":"浏览器 console API","lvl1":["前端"],"lvl2":"摘要","objectID":"97cccb8ad9ebf7eb0bfef090de718627","tags":["浏览器"],"url":"https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/"},{"content":"1. props 和$emit 父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件来做到的. 1Vue.component(\u0026#39;child\u0026#39;,{ 2 data(){ 3 return { 4 mymessage:this.message 5 } 6 }, 7 template: 8 `\u0026lt;div\u0026gt; 9\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;mymessage\u0026#34; @input=\u0026#34;passData(mymessage)\u0026#34;\u0026gt; 10\u0026lt;/div\u0026gt;`, 11 props:[\u0026#39;message\u0026#39","lvl0":"vue 组件通信详解","lvl1":["前端"],"lvl2":"摘要","objectID":"da140931809450e3213f42e7d71fa018","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/"},{"content":"1. beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问 methods， data， computed 等上的方法和数据。 2. created 实例已经创建完成之后被调用，在这一步，","lvl0":"vue 生命周期详解","lvl1":["前端"],"lvl2":"摘要","objectID":"b924be3f9207eccd1e74da483aaecfe5","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/"},{"content":"1. 遍历二叉树 1var {tree} = require(\u0026#39;../重建二叉树/3.js\u0026#39;) 2 3// 先序遍历 4var preTraResult = []; 5 6function preTra(tree){ 7 if(tree.val!=\u0026#39;#\u0026#39;){ 8 preTraResult.push(tree.val); 9 preTra(tree.left); 10 preTra(tree.right); 11 } 12 else{ 13 preTraResult.push(tree.val); 14 return; 15 } 16} 17 18preTra(tree); 19 20console.log(preTraResult); 21 22// 中序遍历 23var inorderTraResult = []; 24 25function inorderTra(tree){ 26 if(tree.val!=\u0026#39;#\u0026#39;){ 27 inorderTra(tree.left); 28 inorderTraResult.push(tree.val); 29 inorderTra(tree.right); 30 }","lvl0":"算法 树的操作","lvl1":["算法"],"lvl2":"摘要","objectID":"3133f420ad70ae6025c310e63639bead","tags":["树"],"url":"https://tomtomyoung.top/post/%E7%AE%97%E6%B3%95-%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"content":"1. 快速排序 1const arr = [ 31, 23, 34, 2, 13, 134, 1, 23, 456, 52, 31 ]; 2 3function quickSort(arr) { 4 // 1.找基准数， 5 // 比基准数大的放右边（右数组） 6 // 比基准数小的放左边（左数组） 7 let base_num = arr[0]; 8 let left_arr = []; 9 let right_arr = []; 10 11 // for( let i = 1; i \u0026lt; arr.length ; i++){ 12 // if(arr[i] \u0026lt; base_num){ 13","lvl0":"js 算法","lvl1":["算法"],"lvl2":"摘要","objectID":"00f517063346cdd2dc518ddd95bd6595","tags":["基础"],"url":"https://tomtomyoung.top/post/js-%E7%AE%97%E6%B3%95/"},{"content":"1. vw vh 的介绍 vw,vh 是 css3 中给我们提供的新的单位，他们是相对于 viewport 视窗的宽高进行计算的单位。说白了，就是相对于浏览器的窗口的大小。 vw : 1vw 等于视口宽度的 1% vh : 1vh 等于视口高度的 1% vmin : 选取 vw 和 vh 中最小的那个 vmax : 选取 vw","lvl0":"css vh\u0026vw","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"eb5221e3a392ff64e2db51e7c9003062","tags":["css"],"url":"https://tomtomyoung.top/post/css-vhvw/"},{"content":"今天在写了一个简单的 H5 页面，项目结构如下图所示： 然后在运行的时候突然报错 Access to script at ‘file:///Volumes/PERSON/font_end/h5xuexi/h5-learning3/vue_no","lvl0":"cross origin requests are only supported for protocol schemes填坑","lvl1":["前端"],"lvl2":"摘要","objectID":"0cb566e90907c3b1c137ad5ff431d1c3","tags":["js"],"url":"https://tomtomyoung.top/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/"},{"content":"使用 element 一些组件，事件如果还有默认参数，如果想在添加自定义参数。如： handleCheckedCitiesChange 事件默认有一个回调参数，如果传一个自定义参数直接写的话 handleCheckedCitiesChange (“自定义参数”) ，原参数会被覆盖，不需要原参数无所谓，如果这时候还想要原参","lvl0":"elementUI事件回调函数传参，传递默认参数和自定义参数填坑","lvl1":["前端"],"lvl2":"摘要","objectID":"e1a2636e4f60ade13500f150d3d6a1bc","tags":["vue","elementUI"],"url":"https://tomtomyoung.top/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/"},{"content":"1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的\u0026quot;hello\u0026quot;这个子串。 1var regex = /hello/; 2console.log( regex.test(\u0026#34;hello\u0026#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而模糊","lvl0":"js 正则表达式","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"3a376bd59f9122baf751674e90000323","tags":["js"],"url":"https://tomtomyoung.top/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"content":"在使用 v-if 控制元素显示隐藏时候，如果判断条件是数组中的元素，在一开始页面渲染显示正常，可以用数组内的变量来控制 v-if 元素，但是以后通过方法直接改变数组内变量却不能影响 v-if 控制的元素显示隐藏。 你可以使用 1this.$set(obj, key, value)/vue.set(obj, key,","lvl0":"vue v-if填坑","lvl1":["前端"],"lvl2":"摘要","objectID":"7bee4d4ceaae8eab5e49340a83b0097e","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-v-if%E5%A1%AB%E5%9D%91/"},{"content":"转载自： http://www.c-lodop.com/faq/pp21.html 1. 安装文件 Lodop 打印控件安装文件两个: 32 位安装程序：install_lodop32.exe； 64 位安装程序：install_lodop64.exe； 2. C-Lodop 云打印服务安装文件俩个，X.XXX 表示版本号","lvl0":"lodop lodop\u0026c-lodop","lvl1":["前端"],"lvl2":"摘要","objectID":"1d0ff3dd943d3a98446dccf1eaa36b88","tags":["lodop"],"url":"https://tomtomyoung.top/post/lodop-lodopc-lodop/"},{"content":"1. 代码背景 用 vuex 管理数据状态，state 中有定义 expressTemplate: false； vue 的 cart 页面有使用 vant 的标签, 提示报错 Computed property “expressTemplate” was assigned to but it has no setter； 1\u0026lt;el-radio-group v-model=\u0026#34;expressTemplate\u0026#34;\u0026gt; 2 \u0026lt;el-radio v-for=\u0026#34;( item, index ) in expressList\u0026#34; :key=\u0026#34;index\u0026#34; :label=\u0026#34;item.id\u0026#34;\u0026gt;{{item.name}}\u0026lt;/el-radio\u0026gt; 3\u0026lt;/el-radio-group\u0026gt; 2. 错误分析 搜索","lvl0":"vue v-model绑定vuex中state报错填坑","lvl1":["前端"],"lvl2":"摘要","objectID":"468e6616c7bd301c90d7c6d432791322","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/"},{"content":"1. SSR 和 CSR 的概念 SSR(Server Side Rendering)： SSR 是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染为主（ASP","lvl0":"ssr\u0026csr","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"0a24fcc98daa4e14de3fd41013766f52","tags":["js"],"url":"https://tomtomyoung.top/post/ssrcsr/"},{"content":"1. 变量 变量如下所示： 1data() { 2 return { 3 // 记录选中行 4 selectRow: [], 5 // 记录展开行 6 expandRow: [], 7 // 表格数据 id必须有！！ 8 tableData: [ 9 { 10 id: 1, 11 wangwangID: \u0026#39;hahahaha-101\u0026#39;, 12 count: \u0026#39;20\u0026#39;, 13 date: \u0026#39;2016-05-03\u0026#39;, 14 name: \u0026#39;王小虎\u0026#39;, 15 address: \u0026#39;上海市普陀区金沙江路 1518 弄","lvl0":"el-table定制选中行展开行样式","lvl1":["前端"],"lvl2":"摘要","objectID":"3f7fd779a2a53488a55e1e99af5a8962","tags":["vue","elementUI"],"url":"https://tomtomyoung.top/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/"},{"content":"1. 新建组件 在 components 文件夹下新建组件，或者可以新建一个 UI 文件夹，用来专门存放二次封装的 UI 组件。 2. 编写组件 1. 基本结构 1\u0026lt;template\u0026gt; 2 \u0026lt;el-dialog 3 class=\u0026#34;dialog-1\u0026#34; \u0026gt; 4 \u0026lt;/el-dialog\u0026gt; 5\u0026lt;/template\u0026gt; 6 7\u0026lt;script\u0026gt; 8export default { 9 name: \u0026#34;myDialog1\u0026#34;, 10 props: { 11 }, 12 computed: { 13 }, 14 methods: { 15 } 16} 17\u0026lt;/script\u0026gt; 18 19\u0026lt;style lang=\u0026#34;less\u0026#34; scoped\u0026gt; 20\u0026lt;/style\u0026gt; 2. 组件参数设置","lvl0":"elementUI组件二次封装","lvl1":["前端"],"lvl2":"摘要","objectID":"64416a07661389d4c4433fe94fc4af24","tags":["vue","elementUI"],"url":"https://tomtomyoung.top/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"},{"content":"1. 域名 1.1 域名简介 在 Internet 上有千百万台主机，为了区分这些主机，每一台主机都被分配一个 IP 地址。但由于 IP 地址没有实际意义且难于记忆，于是就有了域名（Domain Name）。 域名主要是由英文字母、阿拉伯数字、“ -","lvl0":"互联网建站全流程","lvl1":["其他"],"lvl2":"摘要","objectID":"2b0ff8d88a35c27a2a3eddf06b9ef22c","tags":["互联网建站"],"url":"https://tomtomyoung.top/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%BB%BA%E7%AB%99%E5%85%A8%E6%B5%81%E7%A8%8B/"},{"content":"1.连接数据库 1// 引入安装的包 2var mongoose = require(\u0026#39;mongoose\u0026#39;); 3mongoose.connect(\u0026#39;mongodb://localhost/mongoo\u0026#39;); 4//mongoo这里是代表数据库的名称 5var db = mongoose.connection; 6db.on(\u0026#39;error\u0026#39;, console.error.bind(console, \u0026#39;连接失败\u0026#39;)); 7db.once(\u0026#39;open\u0026#39;, function() { 8 console.log(\u0026#39;连接成功\u0026#39;) 9}); 10// new一个","lvl0":"Mongoose使用教程","lvl1":["数据库"],"lvl2":"摘要","objectID":"5a7772e39e6f55950e560df0528165e1","tags":["mongodb"],"url":"https://tomtomyoung.top/post/mongoose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"content":"1. 什么是 Redis Redis 全称 REmote DIctionary Server( 远程字典服务器 ) ，是一个由 Salvatore Sanfilippo 写的 key-value 存储系统。 Redis 遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。 首先要明白 Redis 是一个数据库， redis","lvl0":"redis简介","lvl1":["服务端"],"lvl2":"摘要","objectID":"eb34ab98780db8459d01756d3d0e5a8d","tags":["redis"],"url":"https://tomtomyoung.top/post/redis%E7%AE%80%E4%BB%8B/"},{"content":"1. 我们常用的数据库有哪些？ MySQL 和 MariaDB； Oracle； SQL Server； 上面的三个是最流行的数据库，也是我们开发时频繁的使用数据库。 MySQL 是关系型数据库管理系统。 Oracle 全称 Oracle Database，又名 Oracle RDB","lvl0":"mongoDB简介","lvl1":["数据库"],"lvl2":"摘要","objectID":"884043066b183a4c14ece59f4e581dbd","tags":["mongodb"],"url":"https://tomtomyoung.top/post/mongodb%E7%AE%80%E4%BB%8B/"},{"content":"1.什么是预检请求 定义：预检请求（Preflighted requests ）是浏览器发起跨域请求时，通过 OPTIONS 方法询问服务器对跨域请求的支持情况（支持的包含请求方法、请求头、数据类型）。 2.什么时候会触发预检请求 请求会划","lvl0":"ajax 预检请求","lvl1":["前端","精选"],"lvl2":"摘要","objectID":"9703cc4f68824537976dc1a23cdfd296","tags":["ajax"],"url":"https://tomtomyoung.top/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/"},{"content":"1. XMLHTTPRequest（xhr） XMLHTTPRequest 对象，顾名思义：是基于 XML 的 HTTP 请求。我们在浏览器中使用 XMLHTTPRequest 对象在服务器之间通信，传输的数据是使用 XML 的方式，但最终还是会被转换成 json 数据格式来被我们使用。 XMLHttpRequest 是一个浏览","lvl0":"ajax xhr","lvl1":["前端"],"lvl2":"摘要","objectID":"5ea52843f262b2c2139fde283876eb93","tags":["ajax"],"url":"https://tomtomyoung.top/post/ajax-xhr/"},{"content":"1.官方解释 1.1 html HTML 称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的 Internet 资源连接为一个逻辑整体。HTML 文本是由 HTML 命令组成的描述性文本，HTML 命","lvl0":"html5\u0026html\u0026h5","lvl1":["前端"],"lvl2":"摘要","objectID":"46e5bf5fb6a51cb87a2eec683365a920","tags":["html"],"url":"https://tomtomyoung.top/post/html5htmlh5/"},{"content":"1.官方解释 SVG 是一种图像文件格式，它的英文全称为 Scalable Vector Graphics，意思为可缩放的矢量图形。它是基于 XML（Extensible Markup Language），由 World Wide Web Consortium（W3C）联盟进行开","lvl0":"svg简介","lvl1":["前端"],"lvl2":"摘要","objectID":"93c7856610ad6da54a8f59f915838f0a","tags":["svg"],"url":"https://tomtomyoung.top/post/svg%E7%AE%80%E4%BB%8B/"},{"content":"1. 什么是插槽？ 插槽（Slot）是 Vue 提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组件来控","lvl0":"vue slot简介","lvl1":["前端"],"lvl2":"摘要","objectID":"1de4780f01b6f8387e2ecc1bfb6aa2c2","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-slot%E7%AE%80%E4%BB%8B/"},{"content":"1. 概述 Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享。 2. 优势 使用 Vuex 管理数据的好处： 能够在 vuex 中集中管理共享的数据，便于开发和后期进行维护 能够高效的实现组件之间的数据共享，提","lvl0":"vue vuex简介","lvl1":["前端"],"lvl2":"摘要","objectID":"dc5ff7620139ea03e7c6a43faa5f4d63","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-vuex%E7%AE%80%E4%BB%8B/"},{"content":"1. ECMAScript 的简介 ECMAScript 是一种由 Ecma 国际（前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association）通过 ECMA-262 标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，所以它可以理","lvl0":"ecmascript\u0026javascript","lvl1":["前端"],"lvl2":"摘要","objectID":"ab82a7670cd2dd1c535fde68152e7757","tags":["js"],"url":"https://tomtomyoung.top/post/ecmascriptjavascript/"},{"content":"1. 数据准备 一般分为 5 个步骤 拍摄照片或者下载数据集； 图像标注； 图像数据处理： 图像合成、图像裁剪、改变图像像素大小； 检查标注文件的正确性； 划分训练集、验证集； 2. 搭建神经网络 3. 训练模型 读取数据的多线程生成器","lvl0":"图像识别工程搭建步骤","lvl1":["深度学习"],"lvl2":"摘要","objectID":"a3db09226b6e64ae0268aaa8317c2824","tags":["基础"],"url":"https://tomtomyoung.top/post/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"},{"content":"1.基本概念 了解数据库与数据仓库的区别之前，首先掌握三个概念。数据库软件、数据库、数据仓库。 数据库软件：是一种软件，可以看得见，可以操作。用来实现数据库逻辑功能。属于物理层。 数据库：是一种逻辑概念，用","lvl0":"数据库与数据仓库","lvl1":["数据库"],"lvl2":"摘要","objectID":"ec7890c420c0fa53c2f010a11e544287","tags":["数据库与数据仓库"],"url":"https://tomtomyoung.top/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"},{"content":"1. 什么是断点 断点是程序暂停执行的位置，调试时程序运行到此处，就会暂停。 2. 配置 VSCode 在 vscode 中选择运行，然后选择添加配置： 在 launch.json 里写入一下内容 1{ 2 // 使用 IntelliSense 了解相关属性。 3 // 悬停以查看现有属性的描述。 4 // 欲了解更多","lvl0":"ts 断点调试","lvl1":["前端"],"lvl2":"摘要","objectID":"fa232e2065c2ab207c808c1dd49850e3","tags":["ts"],"url":"https://tomtomyoung.top/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"},{"content":"1.为什么是 TS + Vue 前端正处在逐步挺进企业级开发业务的过程中，强类型的 TS 已经广泛的使用起来，而脚手架工具也是前端工程化的基础。 2.使用 VueCLI 脚手架创建项目 1.创建项目 1vue create 项目名 2.安装 vue typescript 支持 1vue add @vue/typescript 3.安装","lvl0":"ts ts与vue","lvl1":["前端"],"lvl2":"摘要","objectID":"9780163912649a384a459147cf9764af","tags":["ts","vue"],"url":"https://tomtomyoung.top/post/ts-ts%E4%B8%8Evue/"},{"content":"1. TS 简介 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码 开源于 GitHub 上。 其次引用 官网 的定义： TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。T","lvl0":"ts 安装和配置","lvl1":["前端"],"lvl2":"摘要","objectID":"1c3af5bac18dbeb4f00127e14d90e2fd","tags":["ts"],"url":"https://tomtomyoung.top/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"},{"content":"1.问题 在使用 thinkphp 作为后端的框架时，对于一个我们一直在使用的数据库，如果我们中途对数据库中某个表进行字段的添加，那么会出现一种情况是我们需要对这个新添加的字段进行操作时，会提示非法字段，也就是 thinkphp 没有反应","lvl0":"thinkphp数据库缓存问题","lvl1":["服务端"],"lvl2":"摘要","objectID":"bfee462ecdf5106457d3b7c49f0e412e","tags":["php"],"url":"https://tomtomyoung.top/post/thinkphp%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/"},{"content":"参考： 作者： Never Yu 丶 文章：axios 发 post 请求，后端接收不到参数的解决方案 链接：https://blog.csdn.net/csdn_yudong/article/details/79668655 1.问题","lvl0":"ajax axios发送post请求填坑","lvl1":["前端"],"lvl2":"摘要","objectID":"1617864f289360c2e4f7517fff81b29e","tags":["axios"],"url":"https://tomtomyoung.top/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/"},{"content":"1.Electron 是什么 1.Electron 定义 Electron 是一个能让你使用传统前端技术（Nodejs, Javascript, HTML, CSS）开发一个跨平台桌面应用的框架。这里所说的桌面应用指的是在 Windows、OSX 及 Linux 系统上运行的程序。 2.Electron 历史 2013 年的时候，Atom 编","lvl0":"electron简介","lvl1":["前端"],"lvl2":"摘要","objectID":"b0d546376051d18dd8d8ac16884fdbe0","tags":["electron"],"url":"https://tomtomyoung.top/post/electron%E7%AE%80%E4%BB%8B/"},{"content":"1.偏差 bias bias 描述的是根据样本拟合出的模型的输出预测结果的期望与样本真实结果的差距。 简单讲，就是在样本上拟合的好不好。要想在 bias 上表现好，low bias，就得复杂化模型，增加模型的参数，但这样容易过拟合 (","lvl0":"偏差与方差","lvl1":["算法"],"lvl2":"摘要","objectID":"23dc21f4cf566fcb9dfb23314075760c","tags":["偏差与方差"],"url":"https://tomtomyoung.top/post/%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE/"},{"content":"1. 机器学习与深度学习 人工智能的浪潮正席卷全球，诸多词汇时刻萦绕在我们的耳边，如人工智能，机器学习，深度学习等。“人工智能”的概念早在 1956 年就被提出，顾名思义用计算机来构造复杂的，拥有与人类智慧同样本质特","lvl0":"pytorch简介","lvl1":["深度学习"],"lvl2":"摘要","objectID":"093db0514499f78243d3a937e882b2c8","tags":["pytorch"],"url":"https://tomtomyoung.top/post/pytorch%E7%AE%80%E4%BB%8B/"},{"content":"1. VueCLI 简介 vue-cli 俗称脚手架，可以快速创建 vue 项目结构，学习完 webpack 之后，我们会有一种体会就是项目的每个文件夹，每个文件都需要我们手动新建，小项目还好，如果遇到复杂的大项目，这会大大降低开发的效率。如果使用 vue-","lvl0":"vue vuecli简介","lvl1":["前端"],"lvl2":"摘要","objectID":"4d46317891eca8fa8051d77d6c387631","tags":["vue"],"url":"https://tomtomyoung.top/post/vue-vuecli%E7%AE%80%E4%BB%8B/"},{"content":"1.下载 ubuntu 系统 ubuntu 官网下载镜像： https://ubuntu.com/download/desktop 目前 ubuntu20.04LST 版本已经发布，但安装过程和 18.04LST 应该没有什么不同。 2.制作启动 U 盘 ubuntu 系统镜像很小，找一个不用的 U 盘，使用 UltralISO 或 Rufus 制作启动盘 1. 加载系统镜像 菜单栏 文件-\u0026gt;打开 ，选择 ubuntu18.04","lvl0":"win10+ubuntu18.04双系统","lvl1":["linux"],"lvl2":"摘要","objectID":"6e5dc670e20c1bf6735b4c403909fdb1","tags":["双系统"],"url":"https://tomtomyoung.top/post/win10+ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/"}]