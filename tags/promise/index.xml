<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Promise on TomtomYoung Blog 🧐</title>
    <link>https://tomtomyoung.top/tags/promise/</link>
    <description>Recent content in Promise on TomtomYoung Blog 🧐</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomtomyoung.top/tags/promise/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0promise/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0promise/</guid>
      <description>1. 简易版 Promise 1. 实现 executor 比如我们实例化一个 Promise 对象时，会这样写： 1let p1 = new Promise((resolve, reject) =&amp;gt; { 2 resolve(12345); 3}) 这里要注意的是： constructor 接收一个函数作为参数； 这个传入的函数会在实例化时（执行构造函数时）立即执行； 传入的函数接收两个函数（re</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise 表示异步操作的最终结果。与 promise 交互的主要方式是通过它的 then 方法，该方法注册回调来接收 promise 的最</description>
    </item>
    
  </channel>
</rss>
