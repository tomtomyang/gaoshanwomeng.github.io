<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>promise on TomtomYoung Blog</title>
    <link>https://gaoshanwomeng.github.io/tags/promise/</link>
    <description>Recent content in promise on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoshanwomeng.github.io/tags/promise/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>js 手写promise</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%89%8B%E5%86%99promise/</guid>
      <description>1. 简易版Promise 1. 实现executor 比如我们实例化一个Promise对象时，会这样写： 1 2 3 let p1 = new Promise((resolve, reject) =&amp;gt; { resolve(12345); }) 这里要注意的是： constructor接收一个函数作为参数； 这个传入的函数会在实</description>
    </item>
    
    <item>
      <title>js promise详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise表示异步操作的最终结果。与promise交互的主要方式是通过它的then方</description>
    </item>
    
  </channel>
</rss>
