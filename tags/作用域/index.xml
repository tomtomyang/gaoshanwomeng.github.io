<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>作用域 on TomtomYoung Blog</title>
    <link>https://tomtomyoung.top/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
    <description>Recent content in 作用域 on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 Aug 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tomtomyoung.top/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>js this详解</title>
      <link>https://tomtomyoung.top/post/js-this%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-this%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_this JavaScript 的 this 原理 彻底理解js中this的指向，不必硬背。 1. 定义this 与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。 在绝大多数情况下，函数的调用</description>
    </item>
    
    <item>
      <title>js 闭包详解</title>
      <link>https://tomtomyoung.top/post/js-%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_闭包 你不懂JS：作用域与闭包 学习Javascript闭包（Closure） 在 JavaScript 中闭包无所不在，你必须识别并接纳它。 闭包是词法作用域导致的结果。闭包在你的代码中一直在被创建和使用，你在毫无</description>
    </item>
    
    <item>
      <title>js 作用域&amp;作用域链</title>
      <link>https://tomtomyoung.top/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
      <description>参考： MDN Scope 深入理解javascript作用域系列第一篇——内部原理 深入理解javascript作用域系列第二篇——词法作用域和动态作用域 你不懂JS：作用域与闭包 let, const和块级作用域 1. 作用域 第一种说</description>
    </item>
    
    <item>
      <title>js 代码解释执行详解</title>
      <link>https://tomtomyoung.top/post/js-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 编译语言和解释语言的区别 编译器与解释器 JavaScript的工作原理：解析、抽象语法树（AST）+ 提升编译速度5个技巧 IBM compiled-versus-interpreted-languages JavaScript 编译 - JIT (just-in-time) compiler 是怎么工作的 WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作原理 JS</description>
    </item>
    
  </channel>
</rss>