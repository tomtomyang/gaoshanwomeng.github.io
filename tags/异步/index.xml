<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>异步 on TomtomYoung Blog 🧐</title>
    <link>https://tomtomyoung.top/tags/%E5%BC%82%E6%AD%A5/</link>
    <description>Recent content in 异步 on TomtomYoung Blog 🧐</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 24 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomtomyoung.top/tags/%E5%BC%82%E6%AD%A5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/js-async%E4%B8%8Eawait%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-async%E4%B8%8Eawait%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： async和await:让异步编程更简单 1. async 首先，我们使用 async 关键字，把它放在函数声明之前，使其成为 async function。异步函数是一个知道怎样使用 await 关键字调用异步代码的函数。 2. await 3. generator</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/js-generator%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-generator%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_Generator Generator 函数的含义与用法 1. 异步编程 异步编程对 JavaScript 语言太重要。JavaScript 只有单线程，如果没有异步编程，根本没法用，非卡死不可。 以前，异步编程的方法，大概有下面四种。 回调函数 事件监听 发布/订阅 Promise</description>
    </item>
    
  </channel>
</rss>
