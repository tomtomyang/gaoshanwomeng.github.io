<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on TomtomYoung Blog</title>
    <link>https://gaoshanwomeng.github.io/tags/js/</link>
    <description>Recent content in js on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 10 Jul 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gaoshanwomeng.github.io/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>js promise详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise API</description>
    </item>
    
    <item>
      <title>js 作用域&amp;作用域链&amp;闭包</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
      <description>hhh</description>
    </item>
    
    <item>
      <title>js 原型&amp;原型链&amp;继承</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</guid>
      <description>1. prototype 每个函数都有一个 prototype 属性 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&amp;quot;继承&amp;quot;属性。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>js 事件循环与异步并发</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</guid>
      <description>1. JS事件 The event loop is the secret behind JavaScript’s asynchronous programming. JS executes all operations on a single thread, but using a few smart data structures, gives us the illusion of multi-threading. The asynchronous behavior is not part of the JavaScript language itself, rather it is built on top of the core JavaScript language in the browser (or the programming environment) and accessed through the browser APIs. 事件循环是JavaScript异步编</description>
    </item>
    
    <item>
      <title>js IIFE简介</title>
      <link>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 场景 下面这个面试题你大概率遇到过： 1 2 3 4 5 for (var i = 0; i &amp;lt; 5; i++) { setTimeout(() =&amp;gt; { console.log(i); }, 10); } 这里var会声明一个全局变量i。函数会在10秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时</description>
    </item>
    
    <item>
      <title>面试题——JS</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98js/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98js/</guid>
      <description>1. JS基本数据类型 1.1 基本类型 1.2 引用类型 1.3 数据类型的判断 1.4 数据类型的转换 2. 数组的常用方法 2.1 改变原数组的方法 2.2 不改变原数组的方法 2.3 数组的遍历 3. 字符串的常用方法 4. 对象的常用方法 5. Math方法和Date方法 6.</description>
    </item>
    
    <item>
      <title>js object方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-object%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-object%E6%96%B9%E6%B3%95/</guid>
      <description>1. Object.freeze() 阻止修改现有属性的特性和值，并阻止添加新属性 两种用法：Object.freeze( { } ) 和 Object.freeze( object ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let a = {}; a.sex = &amp;#39;男&amp;#39;; console.log(a.sex, 111);//男 111 Object.freeze(a); a.sex = &amp;#39;</description>
    </item>
    
    <item>
      <title>js string方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-string%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-string%E6%96%B9%E6%B3%95/</guid>
      <description>1. 字符串长度 length 属性返回字符串的长度： 实例 1 2 var txt = &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;; var sln = txt.length; 2. 查找字符串中的字符串 indexOf() 方法返回字符串中指定文本首次出现的索引（位置）： 实例 1 2 var str = &amp;#34;The full name of China is the People&amp;#39;s Republic of China.&amp;#34;; var pos = str.indexOf(&amp;#34;China&amp;#34;); JavaScript 从零计算位置。 0 是字符</description>
    </item>
    
    <item>
      <title>js array方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-array%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-array%E6%96%B9%E6%B3%95/</guid>
      <description>创建一个数组 字面量方式 1 var a = [3, 11, 8]; 构造器 1 2 3 4 5 6 // 创建一个指定大小的数组 let 数组名称 = new Array(数组长度); // 创建一个空数组 let 数组名称 = new Array(); // 创建一个给定数据的数组 let 数组名称 = new Array(data1, data2, data3...); ES6 Array.of() 定义</description>
    </item>
    
    <item>
      <title>js 函数柯里化与高阶函数</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>1. 函数柯里化 函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 2. 高阶函数定义 高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。 若A函数，</description>
    </item>
    
    <item>
      <title>js 数据结构</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是计算机存储、组织数据的方式,算法是系统描述解决问题的策略。了解基本的数据结构和算法可以提高代码的性能和质量。 1. 栈 栈的特点：先进后出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>js 变量类型与类型转换</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>数据类型分为基本类型(Primitives)和引用类型(Object)，引用类型可以引申出子类型：Array、Date、Function等等。 **基本类型理解：**变量之间的互相赋值，是指开辟一块新的</description>
    </item>
    
    <item>
      <title>cross origin requests are only supported for protocol schemes填坑</title>
      <link>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</guid>
      <description>今天在写了一个简单的H5页面，项目结构如下图所示： 然后在运行的时候突然报错 Access to script at ‘file:///Volumes/PERSON/font_end/h5xuexi/h5-learning3/vue_n</description>
    </item>
    
    <item>
      <title>js 循环遍历</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</guid>
      <description>1. for循环 javascript中的for循环选择多种多样，可你知道其中的差别在哪里吗？什么时候又该用哪种循环才是最佳策略？ 1.1 for 1 2 3 4 //20年前的写法let len = myArray.Length for (let index = 0; index &amp;lt; len; index++) { console.log(myArray[index]) } 1.2 forEach 1 2 3</description>
    </item>
    
    <item>
      <title>js 正则表达式</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的&amp;quot;hello&amp;quot;这个子串。 1 2 var regex = /hello/; console.log( regex.test(&amp;#34;hello&amp;#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而</description>
    </item>
    
    <item>
      <title>ssr&amp;csr</title>
      <link>https://gaoshanwomeng.github.io/post/ssrcsr/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ssrcsr/</guid>
      <description>1. SSR和CSR的概念 SSR(Server Side Rendering)： SSR是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染</description>
    </item>
    
    <item>
      <title>ecmascript&amp;javascript</title>
      <link>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</guid>
      <description>1. ECMAScript的简介 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这</description>
    </item>
    
    <item>
      <title>js let&amp;const&amp;var</title>
      <link>https://gaoshanwomeng.github.io/post/js-letconstvar/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-letconstvar/</guid>
      <description>1. let，const没有变量提升 首先让我们了解下JavaScript变量赋值的大概过程： 1 2 3 4 5 6 7 8 9 10 11 12 ECStack EC(G) VO(G) 声明提升(函数+变量) 1. 函数声明提升 2. 变量声明提升 变量赋值： 1. 创建变量 2. 创建值(对</description>
    </item>
    
    <item>
      <title>js 箭头函数</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 为什么叫Arrow Function？因为它的定义用的就是一个箭头： 1 x =&amp;gt; x * x 上面的箭头函数相当于： 1 2 3 function (x) { return x * x; } 箭头函数</description>
    </item>
    
  </channel>
</rss>