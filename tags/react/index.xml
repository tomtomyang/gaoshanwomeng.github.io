<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on TomtomYoung Blog 🧐</title>
    <link>https://tomtomyoung.top/tags/react/</link>
    <description>Recent content in react on TomtomYoung Blog 🧐</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 10 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomtomyoung.top/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-fiber%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-fiber%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 走进 React Fiber 的世界 手写 React 的 Fiber 架构，深入理解其原理 1. 背景 在之前的《react react 时间切片与 requestIdleCallback 详解》中，我们了解到 React 为了解决浏览器性能瓶颈，提出了时间切片的机制，将大任务拆分为小任务分别执行。 那么我们就不</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E6%89%8B%E5%86%99react16.x%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E6%89%8B%E5%86%99react16.x%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/</guid>
      <description>参考： 8 月更文挑战｜react 手写实现渲染 JSX 普通版 手写一个简单的 React 手写一个 react 系列（一）：实现 react 和 react-dom 手写 react 核心源码 面试装不了逼？当场手写个 react16.x 框架给他看看 1. 搭建项目 1. 初始化项目 我们需要初始化一个空的 webpack 项目</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E4%B8%8Erequestidlecallback%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E4%B8%8Erequestidlecallback%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 走进 React Fiber 的世界 1. 浏览器性能瓶颈 我们日常使用 App，浏览网页时，有两类场景会制约快速响应： 当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。 发送网络请求后，由于需要等待数据返回才能进一步操</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-hoc%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-hoc%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： React_高阶组件 1. 前言 高阶组件（HigherOrderComponent）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。 具体而言</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-hooks%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-hooks%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： React Hooks 详解 1. Hooks 用途 对函数型组件进行增强，让函数型组件可以存储状态，可以拥有处理副作用的能力，让开发者在不使用类组件的情况下，实现相同的功能。 2. Hooks 解决的问题 Hooks 的诞生，是为了对函数组件进行加强，使用函</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid>
      <description>参考： React 躬行记（1）——函数式编程 React 世界的函数式编程(Functional Programming) 1. 函数式编程定义 函数式编程（Functional Programming）不是一种新的框架或工具，而是一种以函数为主的编程范式</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： React 函数组件详解 hooks 和类组件的区别 为什么 React 现在要推行函数式组件，用 class 不好吗？ 谈谈 react hooks 的优缺点 React Hooks 详解 React 中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return &amp;lt;h1&amp;gt;函数式&amp;lt;/h1&amp;gt; 3}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-jsx%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-jsx%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： react 中文文档_JSX 简介 React 之技术详解（三）- 深入理解 JSX 手写 react 核心源码 配置 babel-loader 处理 JSX 语法 1. 什么是 JSX 设想如下变量声明： 1const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;; 这个语法既不是字符串也不是 HTML，而是 React 独有的 JSX 语法。 JSX 全程是 JavaScript XML，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue%E4%B8%8Ereact%E7%9A%84%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue%E4%B8%8Ereact%E7%9A%84%E5%AF%B9%E6%AF%94/</guid>
      <description>参考： Vue_对比其他框架 个人理解 Vue 和 React 区别 Vue 和 React 相同点非常多： 都使用 Virtural DOM 都使用组件化思想，流程基本一致 都是响应式，推崇单向数据流 都有成熟的社区，都支持服务端渲染 Vue 和 React 实现原理和流程基本一致，都是使用</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： React.Component react-lifecycle-methods-diagram 所谓的生命周期，就是在组件渲染或更新的不同时期会触发的一些回调函数，把这些函数暴露给开发者，方便开发者实现预期的效果。 所有的生命周期都定义在 React Component 类中，因此，只有类组件有生命周期，函数组件是没</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E7%AE%80%E4%BB%8B/</guid>
      <description>参考： React_doc React 的特点和优势 Vue 和 React 的优点分别是什么？ React 技术解密笔记——理念篇 1. React 是什么 React 是一个用于构建用户界面的 JavaScript 库。 使用 React 可以将一些独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。 2. React 解决的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/react-%E7%B1%BB%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E7%B1%BB%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>React 中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return &amp;lt;h1&amp;gt;函数式&amp;lt;/h1&amp;gt; 3} 类定义组件 1class Welcome extends React.Component { 2 render() { 3 return &amp;lt;h1&amp;gt;类式&amp;lt;/h1&amp;gt;; 4 } 5} 我们来主要研究类组</description>
    </item>
    
  </channel>
</rss>
