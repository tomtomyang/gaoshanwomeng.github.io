<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on TomtomYoung Blog 🧐</title>
    <link>https://tomtomyoung.top/tags/vue/</link>
    <description>Recent content in vue on TomtomYoung Blog 🧐</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomtomyoung.top/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>参考： 阮一峰——测试框架 Mocha 实例教程 jest 官网 TDD 和 BDD 的区别 Testing Vue.js Applications 1. 测试的必要性 对于稍微有一些开发经验的同学在开发过程中总会经历下面类似的问题： 每次在版本发布上线之前，在电脑前蹲上好几个小时甚至是更长时间对你</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</guid>
      <description>参考： Vue.js_深入响应式原理 Vue 源码分析之实现一个简易版的 Vue DMQ/mvvm vue 源码解读（一）Observer/Dep/Watcher 是如何实现数据绑定的 Observer、Dep、Watcher 傻傻搞不清楚 1. 双向</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%AE%80%E4%BB%8B/</guid>
      <description>参考： Vue_doc Vue 和 React 的优点分别是什么？ (vue) =&amp;gt; {渐进式} Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？ The Progressive Framework by Evan You 1. Vue 是什么 这一点，Vue 的官网说的很清楚： 一句话来说，一套用于构建用户界面的</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-vdom%E4%B8%8Ediff%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vdom%E4%B8%8Ediff%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： VirtualDOM 与 diff( Vue 实现) 1. VNode 在刀耕火种的年代，我们需要在各个事件方法中直接操作 DOM 来达到修改视图的目的。但是当应用一大就会变得难以维护。 那我们是不是可以把真实 DOM 树抽象成一棵以 JavaScript 对象构成的抽象树，在修改抽象树</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： Vue.js_深入响应式原理 Vue 源码分析之实现一个简易版的 Vue DMQ/mvvm 1. 数据劫持原理 关于如何实现数据劫持，在 Vue 的官网有一段描述： Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通的 JavaScript 对象。而</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue%E4%B8%8Ereact%E7%9A%84%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue%E4%B8%8Ereact%E7%9A%84%E5%AF%B9%E6%AF%94/</guid>
      <description>参考： Vue_对比其他框架 个人理解 Vue 和 React 区别 Vue 和 React 相同点非常多： 都使用 Virtural DOM 都使用组件化思想，流程基本一致 都是响应式，推崇单向数据流 都有成熟的社区，都支持服务端渲染 Vue 和 React 实现原理和流程基本一致，都是使用</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. props 和$emit 父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件来做到的. 1Vue.component(&amp;#39;child&amp;#39;,{ 2 data(){ 3 return { 4 mymessage:this.message 5 } 6 }, 7 template: 8 `&amp;lt;div&amp;gt; 9&amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;mymessage&amp;#34; @input=&amp;#34;passData(mymessage)&amp;#34;&amp;gt; 10&amp;lt;/div&amp;gt;`, 11 props:[&amp;#39;message&amp;#39</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问 methods， data， computed 等上的方法和数据。 2. created 实例已经创建完成之后被调用，在这一步，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</guid>
      <description>使用 element 一些组件，事件如果还有默认参数，如果想在添加自定义参数。如： handleCheckedCitiesChange 事件默认有一个回调参数，如果传一个自定义参数直接写的话 handleCheckedCitiesChange (“自定义参数”) ，原参数会被覆盖，不需要原参数无所谓，如果这时候还想要原参</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-v-if%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-v-if%E5%A1%AB%E5%9D%91/</guid>
      <description>在使用 v-if 控制元素显示隐藏时候，如果判断条件是数组中的元素，在一开始页面渲染显示正常，可以用数组内的变量来控制 v-if 元素，但是以后通过方法直接改变数组内变量却不能影响 v-if 控制的元素显示隐藏。 你可以使用 1this.$set(obj, key, value)/vue.set(obj, key,</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</guid>
      <description>1. 代码背景 用 vuex 管理数据状态，state 中有定义 expressTemplate: false； vue 的 cart 页面有使用 vant 的标签, 提示报错 Computed property “expressTemplate” was assigned to but it has no setter； 1&amp;lt;el-radio-group v-model=&amp;#34;expressTemplate&amp;#34;&amp;gt; 2 &amp;lt;el-radio v-for=&amp;#34;( item, index ) in expressList&amp;#34; :key=&amp;#34;index&amp;#34; :label=&amp;#34;item.id&amp;#34;&amp;gt;{{item.name}}&amp;lt;/el-radio&amp;gt; 3&amp;lt;/el-radio-group&amp;gt; 2. 错误分析 搜索</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</guid>
      <description>1. 变量 变量如下所示： 1data() { 2 return { 3 // 记录选中行 4 selectRow: [], 5 // 记录展开行 6 expandRow: [], 7 // 表格数据 id必须有！！ 8 tableData: [ 9 { 10 id: 1, 11 wangwangID: &amp;#39;hahahaha-101&amp;#39;, 12 count: &amp;#39;20&amp;#39;, 13 date: &amp;#39;2016-05-03&amp;#39;, 14 name: &amp;#39;王小虎&amp;#39;, 15 address: &amp;#39;上海市普陀区金沙江路 1518 弄</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</guid>
      <description>1. 新建组件 在 components 文件夹下新建组件，或者可以新建一个 UI 文件夹，用来专门存放二次封装的 UI 组件。 2. 编写组件 1. 基本结构 1&amp;lt;template&amp;gt; 2 &amp;lt;el-dialog 3 class=&amp;#34;dialog-1&amp;#34; &amp;gt; 4 &amp;lt;/el-dialog&amp;gt; 5&amp;lt;/template&amp;gt; 6 7&amp;lt;script&amp;gt; 8export default { 9 name: &amp;#34;myDialog1&amp;#34;, 10 props: { 11 }, 12 computed: { 13 }, 14 methods: { 15 } 16} 17&amp;lt;/script&amp;gt; 18 19&amp;lt;style lang=&amp;#34;less&amp;#34; scoped&amp;gt; 20&amp;lt;/style&amp;gt; 2. 组件参数设置</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-slot%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-slot%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是插槽？ 插槽（Slot）是 Vue 提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组件来控</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-vuex%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vuex%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 概述 Vuex 是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享。 2. 优势 使用 Vuex 管理数据的好处： 能够在 vuex 中集中管理共享的数据，便于开发和后期进行维护 能够高效的实现组件之间的数据共享，提</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/ts-ts%E4%B8%8Evue/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ts-ts%E4%B8%8Evue/</guid>
      <description>1.为什么是 TS + Vue 前端正处在逐步挺进企业级开发业务的过程中，强类型的 TS 已经广泛的使用起来，而脚手架工具也是前端工程化的基础。 2.使用 VueCLI 脚手架创建项目 1.创建项目 1vue create 项目名 2.安装 vue typescript 支持 1vue add @vue/typescript 3.安装</description>
    </item>
    
    <item>
      <title></title>
      <link>https://tomtomyoung.top/post/vue-vuecli%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vuecli%E7%AE%80%E4%BB%8B/</guid>
      <description>1. VueCLI 简介 vue-cli 俗称脚手架，可以快速创建 vue 项目结构，学习完 webpack 之后，我们会有一种体会就是项目的每个文件夹，每个文件都需要我们手动新建，小项目还好，如果遇到复杂的大项目，这会大大降低开发的效率。如果使用 vue-</description>
    </item>
    
  </channel>
</rss>
