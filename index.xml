<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TomtomYoung Blog</title>
    <link>https://gaoshanwomeng.github.io/</link>
    <description>Recent content on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gaoshanwomeng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>js 模块化详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>1.传统模式弊端 传统的开发模式就是一个页面对应1套html，js，css。这样就造成了3个问题： 命名冲突 多个js文件如果存在同名的变量，则会发生变量覆盖。 1.js 1 const a=1 2.js 1 const a=2 文件依赖 各个js文件之间不能相</description>
    </item>
    
    <item>
      <title>webpack和bable的关系</title>
      <link>https://gaoshanwomeng.github.io/post/webpack%E5%92%8Cbable%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Wed, 21 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/webpack%E5%92%8Cbable%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>作者：whosmeya 链接：https://juejin.cn/post/6844904098303574023 来源：掘金 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 1. webpack webpack 是一</description>
    </item>
    
    <item>
      <title>xss&amp;csrf</title>
      <link>https://gaoshanwomeng.github.io/post/xsscsrf/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/xsscsrf/</guid>
      <description>1：什么是XSS攻击？ XSS，即 Cross Site Script，跨站脚本攻击； XSS 攻击是指攻击者在网站上注入恶意的客户端代码，对客户端网页进行篡改，对用户浏览器进行控制或者获取用户隐私数据； XSS攻击可以分为3类：反</description>
    </item>
    
    <item>
      <title>js promise详解</title>
      <link>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise表示异步操作的最终结果。与promise交互的主要方式是通过它的then方法，</description>
    </item>
    
    <item>
      <title>js 作用域&amp;作用域链&amp;闭包</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
      <description>hhh</description>
    </item>
    
    <item>
      <title>js 原型&amp;原型链&amp;继承</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/</guid>
      <description>1. prototype 每个函数都有一个 prototype 属性 每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型&amp;quot;继承&amp;quot;属性。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>浏览器 setTimeout&amp;setInterval</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-settimeoutsetinterval/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-settimeoutsetinterval/</guid>
      <description>1. setTimeout setTimeout的在一段时间之后，执行指定的一段函数 （仅执行一次） 可以理解为指定延迟后执行函数 2. setInterval setInterval是循环执行函数，每隔一段时间就执行一次指定的函数（执行N次） 可以理解为指</description>
    </item>
    
    <item>
      <title>js 事件循环与异步并发</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</guid>
      <description>1. JS事件 The event loop is the secret behind JavaScript’s asynchronous programming. JS executes all operations on a single thread, but using a few smart data structures, gives us the illusion of multi-threading. The asynchronous behavior is not part of the JavaScript language itself, rather it is built on top of the core JavaScript language in the browser (or the programming environment) and accessed through the browser APIs. 事件循环是JavaScript异步编</description>
    </item>
    
    <item>
      <title>git husky简介</title>
      <link>https://gaoshanwomeng.github.io/post/git-husky%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-husky%E7%AE%80%E4%BB%8B/</guid>
      <description>husky5.x使用总结 husky可以让我们向项目中方便添加git hooks。通常情况下只需要如下两步就可在项目中引入并设置好husky： 将husky添加到项目的开发依赖中 1 npm install -D husky 在package.</description>
    </item>
    
    <item>
      <title>nodejs 事件循环</title>
      <link>https://gaoshanwomeng.github.io/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>事件循环机制解析 当 Node.js 启动后，它会初始化事件循环，处理已提供的输入脚本（或丢入 REPL，本文不涉及到），它可能会调用一些异步的 API、调度定时器，或者调用 process.nextTick()，然后开始处</description>
    </item>
    
    <item>
      <title>git 分支的新建与合并</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</guid>
      <description>切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分</description>
    </item>
    
    <item>
      <title>git 家族式命令</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 初始化配置 config 1 2 3 4 5 git config -global user.name &amp;lt;name&amp;gt; #设置提交者名字 git config -global user.email &amp;lt;email&amp;gt; #设置提交者邮箱 git config -global core.editor &amp;lt;editor&amp;gt; #设置默认文本编辑器 git config -global merge.tool &amp;lt;tool&amp;gt; #设置解决合并冲突时差异分析工具 git config -list #检查已有的配置信息 2. 创建本地仓库 init 1 git init #初</description>
    </item>
    
    <item>
      <title>git 远程仓库与本地仓库</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>1. 从远程主机克隆 Git 的 clone 命令会为你自动将远程主机命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。同时Git 也会给你一个与 origin 的maste</description>
    </item>
    
    <item>
      <title>js IIFE简介</title>
      <link>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-iife%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 场景 下面这个面试题你大概率遇到过： 1 2 3 4 5 for (var i = 0; i &amp;lt; 5; i++) { setTimeout(() =&amp;gt; { console.log(i); }, 10); } 这里var会声明一个全局变量i。函数会在10秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时</description>
    </item>
    
    <item>
      <title>浏览器 从浏览器多进程到js单线程</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%B0js%E5%8D%95%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%B0js%E5%8D%95%E7%BA%BF%E7%A8%8B/</guid>
      <description>windows打开任务管理器，可以看到后台进程列表。可以看到每个进程的内存资源信息以及cpu占有率。 所以，应该更容易理解了：进程是cpu资源分配的最小单位（系统会给它分配内存） 最后，再用较为官方的术语</description>
    </item>
    
    <item>
      <title>webpack简介</title>
      <link>https://gaoshanwomeng.github.io/post/webpack%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/webpack%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 为什么使用webpack 1. 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方法： 引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载大量脚本会导致网络瓶颈。 使用一个包</description>
    </item>
    
    <item>
      <title>vscode常用快捷键</title>
      <link>https://gaoshanwomeng.github.io/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. 编辑器操作 ctrl+shift+n 打开新的编辑器窗口 ctrl+shiift+w 关闭当前编辑器窗口 f11 全屏显示 2. 文件操作 ctrl+tab 在打开的文件之间进行切换 ctrl+n 新建文件 ctrl+w 关闭当前文件窗口 ctrl+\ 切出一个新的文件窗口 ctrl+alt+→/← 将当前文件切到新窗口 3. 光标移</description>
    </item>
    
    <item>
      <title>浏览器 console API</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</guid>
      <description>console.assert(expression, object) 级别：Error expression评估为false时，将object写入控制台。 1 2 3 4 const x = 5; const y = 3; const reason = &amp;#39;x is expected to be less than y&amp;#39;; console.assert(x &amp;lt; y, {x, y, reason}); console.clear() 清空控制台 1 console.clear(); 如果启用了Preserve Log，con</description>
    </item>
    
    <item>
      <title>react react-native简介</title>
      <link>https://gaoshanwomeng.github.io/post/react-react-native%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-react-native%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是React Native 要了解RN，肯定是要从官网入手： 按照官网的介绍，RN是使用React来创建Android和ios的原生应用的JavaScript框架。 RN具有以下的特点： 一次学习，随处编写 因为R</description>
    </item>
    
    <item>
      <title>react 简介</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是react 用来构建UI的 JavaScript库 React 不是一个 MVC 框架，仅仅是视图（V）层的库 2. react的特点 使用 JSX语法 创建组件，实现组件化开发，为函数式的 UI 编程方式打开了大门 虚拟DOM（Vir</description>
    </item>
    
    <item>
      <title>浏览器 chrome常用快捷键</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. 浏览器快捷键 f12/ctrl+shift+c 打开devtools element界面 ctrl+shift+j 直接打开devtools console界面 ctrl+n 打开新的浏览器窗口 ctrl+shift+n 打开新的无痕浏览窗口 ctrl+w 关闭当前页面 shift+esc 打开任务管理器 ctrl+1-x 切换到不同页面 ctrl+p 打印页面 2. 开</description>
    </item>
    
    <item>
      <title>浏览器 chrome开发者工具使用指南</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>1. console面板 1.1 查看记录的消息 记录消息的原因一般有两个： 确保代码以正确的顺序执行。 在某个时刻检查变量的值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 console.log(&amp;#39;Loading!&amp;#39;); console.assert(document.querySelector(&amp;#39;h2&amp;#39;), &amp;#39;h2 not found!&amp;#39;); const artists = [ { first: &amp;#39;René&amp;#39;, last:</description>
    </item>
    
    <item>
      <title>面试题——CSS</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98css/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98css/</guid>
      <description>1. CSS盒模型 1.1 标准盒模型 1.2 怪异盒模型 2. CSS选择器 标签选择器 选择器 例子 例子描述 element p 选择所有 &amp;lt;p&amp;gt; 元素。 类选择器 . 选择器 例子 例子描述 .class .intro 选择 class=&amp;ldquo;intro&amp;rdquo; 的所有元素。 id选择器 # 选择器 例子 例子描述 #id #firstname 选择 id=&amp;ldquo;firstname&amp;rdquo; 的元素。 子</description>
    </item>
    
    <item>
      <title>面试题——HTML</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98html/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98html/</guid>
      <description>1. HTML文档的结构 1 2 3 4 5 6 7 8 9 10 11 12 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 2. HTML5新增特性</description>
    </item>
    
    <item>
      <title>面试题——JS</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98js/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98js/</guid>
      <description>1. JS基本数据类型 1.1 基本类型 1.2 引用类型 1.3 数据类型的判断 1.4 数据类型的转换 2. 数组的常用方法 2.1 改变原数组的方法 2.2 不改变原数组的方法 2.3 数组的遍历 3. 字符串的常用方法 4. 对象的常用方法 5. Math方法和Date方法 6.</description>
    </item>
    
    <item>
      <title>面试题——VUE</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98vue/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98vue/</guid>
      <description>1. MVVM 2. VUE的特性/与React的区别 3. VUE的双向数据绑定的实现 核心是数据劫持与观察者模式 3.1 VUE2 3.2 VUE3 3.3 DOM diff 4. VUE的生命周期 beforeCreate( 创建前 ) 在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象</description>
    </item>
    
    <item>
      <title>面试题——优化</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%B6%E4%BB%96/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%85%B6%E4%BB%96/</guid>
      <description>1. 前端性能优化 1.1 DNS预获取 一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式； DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析； 默认情况下浏览器会对页面中和当前域名不在同</description>
    </item>
    
    <item>
      <title>面试题——浏览器</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B5%8F%E8%A7%88%E5%99%A8/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B5%8F%E8%A7%88%E5%99%A8/</guid>
      <description>1. 浏览器的工作流程 2. 从输入URL到显示页面 DNS解析 建立TCP连接 客户端发动HTTP请求 服务端接收到请求并返回相应资源 浏览器渲染页面 断开连接 2. 浏览器缓存 2.1 http缓存 强缓存 协商缓存 缓存机制 2.2 本地存储 c</description>
    </item>
    
    <item>
      <title>面试题——算法与数据结构</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>面试题——计算机网络</title>
      <link>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>1. 七层模型和五层模型 1.1 七层模型与五层模型的介绍 OSI七层模型： 应用层 表示层 会话层 传输层 网络层 数据链路层 物理层 TCP/IP四层模型 应用层 运输层 网际层 网络接口层 折中的五层模型 应用层 传输层 网络层 数据链路层 物</description>
    </item>
    
    <item>
      <title>js object方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-object%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-object%E6%96%B9%E6%B3%95/</guid>
      <description>1. Object.freeze() 阻止修改现有属性的特性和值，并阻止添加新属性 两种用法：Object.freeze( { } ) 和 Object.freeze( object ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 let a = {}; a.sex = &amp;#39;男&amp;#39;; console.log(a.sex, 111);//男 111 Object.freeze(a); a.sex = &amp;#39;</description>
    </item>
    
    <item>
      <title>js string方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-string%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-string%E6%96%B9%E6%B3%95/</guid>
      <description>1. 字符串长度 length 属性返回字符串的长度： 实例 1 2 var txt = &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34;; var sln = txt.length; 2. 查找字符串中的字符串 indexOf() 方法返回字符串中指定文本首次出现的索引（位置）： 实例 1 2 var str = &amp;#34;The full name of China is the People&amp;#39;s Republic of China.&amp;#34;; var pos = str.indexOf(&amp;#34;China&amp;#34;); JavaScript 从零计算位置。 0 是字符</description>
    </item>
    
    <item>
      <title>js 算法2</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E7%AE%97%E6%B3%952/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E7%AE%97%E6%B3%952/</guid>
      <description>1. 遍历二叉树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 var {tree} = require(&amp;#39;../重建二叉树/3.js&amp;#39;) //</description>
    </item>
    
    <item>
      <title>js array方法</title>
      <link>https://gaoshanwomeng.github.io/post/js-array%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-array%E6%96%B9%E6%B3%95/</guid>
      <description>创建一个数组 字面量方式 1 var a = [3, 11, 8]; 构造器 1 2 3 4 5 6 // 创建一个指定大小的数组 let 数组名称 = new Array(数组长度); // 创建一个空数组 let 数组名称 = new Array(); // 创建一个给定数据的数组 let 数组名称 = new Array(data1, data2, data3...); ES6 Array.of() 定义</description>
    </item>
    
    <item>
      <title>js 算法</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E7%AE%97%E6%B3%95/</guid>
      <description>1. 快速排序 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 const arr = [ 31, 23, 34, 2, 13, 134, 1, 23, 456, 52, 31 ]; function quickSort(arr) { // 1.找基准数， // 比基准数大的放右边（右数组） // 比基准数小的放左边</description>
    </item>
    
    <item>
      <title>css tailwind简介</title>
      <link>https://gaoshanwomeng.github.io/post/css-tailwind%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/css-tailwind%E7%AE%80%E4%BB%8B/</guid>
      <description>TailwindCSS 因为一个 class 代表一个 CSS 属性这种原子化 CSS (Atomic CSS)，这种细粒度的 CSS 方案备受争议。 这里把 CSS 样式的方案分为四种粒度 1. 四种粒度 1 2 3 4 5 6 7 &amp;lt;div style=&amp;#34;{ borderRadius: &amp;#39;0.5rem&amp;#39;, padding: &amp;#39;1rem&amp;#39; }&amp;#34;&amp;gt; Click &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;rounded-lg p-4&amp;#34;&amp;gt; Click &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;button&amp;#34;&amp;gt; Click &amp;lt;/div&amp;gt; &amp;lt;Button&amp;gt; Click &amp;lt;/Button&amp;gt; 越往下走，颗粒度越来越大，</description>
    </item>
    
    <item>
      <title>react 事件处理</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid>
      <description>通过onXxx属性指定事件处理函数（注意大小写） React使用的是自定义（合成）事件，而不是使用原生的DOM事件，为了更好的兼容性 React中的事件是通过事件委托方处理的（委托给组件的最外层元素 通过e</description>
    </item>
    
    <item>
      <title>react 受控组件和非受控组件</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6%E5%92%8C%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>1. 非受控组件（现用现取） 非受控组件就是现用现取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //创建组件 class Login extends React.Component{ handleSubmit = (event)=&amp;gt;{ event.preventDefault() //阻止表单提交 const {username,password} = this alert(`你输入的用户名是：${username.value</description>
    </item>
    
    <item>
      <title>css vh&amp;vw</title>
      <link>https://gaoshanwomeng.github.io/post/css-vhvw/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/css-vhvw/</guid>
      <description>1. vw vh的介绍 vw,vh是css3中给我们提供的新的单位，他们是相对于viewport视窗的宽高进行计算的单位。说白了，就是相对于浏览器的窗口的大小。 vw : 1vw 等于视口宽度的1% vh : 1vh 等于视口高度的1% vmin</description>
    </item>
    
    <item>
      <title>react 类式组件</title>
      <link>https://gaoshanwomeng.github.io/post/react-%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/react-%E7%B1%BB%E5%BC%8F%E7%BB%84%E4%BB%B6/</guid>
      <description>React中有两种定义组件的方式： 函数式定义组件 1 2 3 function Welcome() { return &amp;lt;h1&amp;gt;函数式&amp;lt;/h1&amp;gt; } 类式定义组件 1 2 3 4 5 class Welcome extends React.Component { render() { return &amp;lt;h1&amp;gt;类式&amp;lt;/h1&amp;gt;; }</description>
    </item>
    
    <item>
      <title>import React,{Component} from &#39;react&#39;解释</title>
      <link>https://gaoshanwomeng.github.io/post/import-reactcomponent-from-react%E8%A7%A3%E9%87%8A/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/import-reactcomponent-from-react%E8%A7%A3%E9%87%8A/</guid>
      <description>在学习react框架时，我们会在App.js中写这样一种语法： 1 import React,{Component} from &amp;#39;react&amp;#39; 表面看起来是结构赋值的样子，但其实，这是ES6的另一种引入方式，即default引入与单个引入相结合的方式。 想使用这种引入方式，</description>
    </item>
    
    <item>
      <title>js 函数柯里化与高阶函数</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E4%B8%8E%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>1. 函数柯里化 函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。 2. 高阶函数定义 高阶函数：如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。 若A函数，</description>
    </item>
    
    <item>
      <title>es6 class</title>
      <link>https://gaoshanwomeng.github.io/post/es6-class/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-class/</guid>
      <description>ES6提供了更接近传统语言的写法，引入了Class类的概念，作为对象的模板，通过class关键字，可以定义类。 基本上，ES6的class可以看作是一个语法糖，他的绝大部分功能ES5都可以做到，只是新的</description>
    </item>
    
    <item>
      <title>es6 map</title>
      <link>https://gaoshanwomeng.github.io/post/es6-map/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-map/</guid>
      <description>Map 对象 Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。 Maps 和 Objects 的区别 一个 Object 的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。 Map 中的键值是有序的（FIFO 原则），而添加到对</description>
    </item>
    
    <item>
      <title>es6 promise</title>
      <link>https://gaoshanwomeng.github.io/post/es6-promise/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-promise/</guid>
      <description>promise是ES6引入的异步编程的新解决方案，语法上promise是一个构造函数，用来封装异步操作并可以获取其成功或者失败的结果。 Promise构造函数：Promise(excutor){ } Promise.prototype.then 方法</description>
    </item>
    
    <item>
      <title>es6 set</title>
      <link>https://gaoshanwomeng.github.io/post/es6-set/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-set/</guid>
      <description>Set 对象 Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 Set 中的特殊值 Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待： +0 与 -0 在存储判断唯一性的时候是恒等的，所</description>
    </item>
    
    <item>
      <title>es6 对象方法扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E6%89%A9%E5%B1%95/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 //1. Object.is 判断两个值是否完全相等 console.log(Object.is(120, 120));// === console.log(Object.is(NaN, NaN));// === console.log(NaN === NaN);// === //2. Object.assign 对象的合并 const config1 = { host: &amp;#39;localhost&amp;#39;, port: 3306, name: &amp;#39;root&amp;#39;, pass: &amp;#39;root&amp;#39;, test: &amp;#39;test&amp;#39; }; const config2 = { host: &amp;#39;http://atguigu.com&amp;#39;, port: 33060, name: &amp;#39;atguigu.com&amp;#39;, pass: &amp;#39;iloveyou&amp;#39;, test2: &amp;#39;test2&amp;#39; } // config</description>
    </item>
    
    <item>
      <title>es6 数值扩展</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%95%B0%E5%80%BC%E6%89%A9%E5%B1%95/</guid>
      <description>1. Number.EPSILON Number.EPSILON 是 JavaScript 表示的最小精度 EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16 1 2 3 4 5 6 7 8 9 10 function equal(a, b){ if(Math.abs(a-b) &amp;lt; Number.EPSILON){ return true; }else{ return false; } } console.log(0.1 + 0.2 === 0.3); // false 0.1+1.2 = 0.30000000000000004 console.log(equal(0.1 + 0.2, 0.3)) // true 2. 二进制和八进制 1 2 3 4 5 let b = 0b1010; let o = 0o777; let d = 100; let x = 0xff; console.log(x); 3. Number.isFinite Number.isFinite 检测一个数值是</description>
    </item>
    
    <item>
      <title>es6 生成器</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>什么是生成器 生成器其实就是一个特殊的函数，是异步编程的一种解决方案 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //函数代码的分隔符 function * gen(){ console.log(111); yield &amp;#39;一只没有耳朵&amp;#39;; console.log(222); yield &amp;#39;一只没有尾部</description>
    </item>
    
    <item>
      <title>es6 生成器2</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A82/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%94%9F%E6%88%90%E5%99%A82/</guid>
      <description>generator（生成器）是ES6标准引入的新的数据类型。最大特点就是可以交出函数的执行权（即暂停执行）。一个generator看上去像一个函数,区别就是函数名前面多了一个星号 *，但可以返回多次。与</description>
    </item>
    
    <item>
      <title>js 数据结构</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>数据结构是计算机存储、组织数据的方式,算法是系统描述解决问题的策略。了解基本的数据结构和算法可以提高代码的性能和质量。 1. 栈 栈的特点：先进后出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description>
    </item>
    
    <item>
      <title>es6 rest参数</title>
      <link>https://gaoshanwomeng.github.io/post/es6-rest%E5%8F%82%E6%95%B0/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-rest%E5%8F%82%E6%95%B0/</guid>
      <description>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // ES5 获取实参的方式 function date(){ console.log(arguments); } date(&amp;#39;白芷&amp;#39;,&amp;#39;阿娇&amp;#39;,&amp;#39;</description>
    </item>
    
    <item>
      <title>es6 symbol</title>
      <link>https://gaoshanwomeng.github.io/post/es6-symbol/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-symbol/</guid>
      <description>1. 为什么会出现Symbol 对象在 JavaScript 语言中扮演重要角色，它们的使用无处不在。对象通常用作键/值对的集合，然而，以这种方式使用它们有一个很大的限制: 在 symbol 出现之前，对象键只能是字符串，如果试图使用非字符串值</description>
    </item>
    
    <item>
      <title>es6 扩展运算符</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>『&amp;hellip;』 扩展运算符能将『数组』转换为逗号分隔的『参数序列』 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 //声明一个数组 ... const tfboys = [&amp;#39;易烊千玺&amp;#39;,&amp;#39;王源&amp;#</description>
    </item>
    
    <item>
      <title>js 变量类型与类型转换</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>数据类型分为基本类型(Primitives)和引用类型(Object)，引用类型可以引申出子类型：Array、Date、Function等等。 **基本类型理解：**变量之间的互相赋值，是指开辟一块新的</description>
    </item>
    
    <item>
      <title>hugo 从0编写主题</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E4%BB%8E0%E7%BC%96%E5%86%99%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E4%BB%8E0%E7%BC%96%E5%86%99%E4%B8%BB%E9%A2%98/</guid>
      <description>根据hugo官网的介绍，hugo是世界上最受欢迎的静态网站生成器之一，基于golang开发，已经发布到0.65.0版本。hugo采用开源的goldmark作为markdown的解析器，兼容GitHub</description>
    </item>
    
    <item>
      <title>cross origin requests are only supported for protocol schemes填坑</title>
      <link>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</guid>
      <description>今天在写了一个简单的H5页面，项目结构如下图所示： 然后在运行的时候突然报错 Access to script at ‘file:///Volumes/PERSON/font_end/h5xuexi/h5-learning3/vue_n</description>
    </item>
    
    <item>
      <title>es6 函数参数初始值</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%9D%E5%A7%8B%E5%80%BC/</guid>
      <description>ES6 允许给函数参数赋值初始值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 //1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则) function add(a,c=10,b) { return a + b + c; } let result = add(1,2); console.log(result); //2. 与解构赋值结合 function connect({host=&amp;#34;127.0.0.1&amp;#34;, username,password, port}){ console.log(host) console.log(username) console.log(password) console.log(port) } connect({ host: &amp;#39;atguigu.com&amp;#39;, username: &amp;#39;root&amp;#39;, password: &amp;#39;root&amp;#39;, port:</description>
    </item>
    
    <item>
      <title>es6 模板字符串</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>字符串模板引擎 ES5中的字符串缺乏多行字符串、字符串格式化、HTML转义等特性。 而ES6通过模板字面量的方式进行了填补，模板字面量试着跳出JS已有的字符串体系，通过一些全新的方法来解决问题。 1.基本用</description>
    </item>
    
    <item>
      <title>es6 箭头函数</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 1.基础语法 通常函数的定义方法: 1 2 3 4 5 6 7 var fn1 = function(a, b) { return a + b } function fn2(a, b) { return a + b } 使用ES6箭头函数语法定义函数，将原函数的“</description>
    </item>
    
    <item>
      <title>es6 箭头函数2</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B02/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B02/</guid>
      <description>ES6 允许使用「箭头」（=&amp;gt;）定义函数。 声明一个函数 1 2 3 4 5 6 let fn = function(){ } let fn = (*a*,*b*) =&amp;gt; { return *a* + *b*; } 调用函数 1 2 let result = fn(1, 2); console.log(result); 箭头函数特性 this 始终指向函数声明时所在作用域下的 this 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>es6 解构赋值</title>
      <link>https://gaoshanwomeng.github.io/post/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>解构赋值 什么是解构赋值？ 在语法上，就是赋值的作用，解构为（左边一种解构。右边一种解构，左右一一对应进入赋值） 解构赋值的分类。 左右为数组即为数组解构赋值； 左右为对象即为对象解构赋值； 左边是数组，右边是字</description>
    </item>
    
    <item>
      <title>es6 const</title>
      <link>https://gaoshanwomeng.github.io/post/es6-const/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-const/</guid>
      <description>es6中新增了一个const。就是用来定义一个常量的。有一下特性： 常量名一般大写； 和let一样，块级作用域； 一定要赋初值； 对数组和对象的元素修改，不算做对常量的修改，不会报错； 问题来了： 1 2 3 4 let obj =</description>
    </item>
    
    <item>
      <title>es6 let</title>
      <link>https://gaoshanwomeng.github.io/post/es6-let/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/es6-let/</guid>
      <description>let命令的用法 let是es6中的声明一个变量的命令，只在它声明的代码块中有效，出了这个代码块就会报错。也非常适合for循环，在循环中i的值只在循环语句中生效，在外边取不到的。 var命令声明的是一个全</description>
    </item>
    
    <item>
      <title>elementUI事件回调函数传参，传递默认参数和自定义参数填坑</title>
      <link>https://gaoshanwomeng.github.io/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</guid>
      <description>使用element一些组件，事件如果还有默认参数，如果想在添加自定义参数。 如： handleCheckedCitiesChange事件默认有一个回调参数，如果传一个自定义参数直接写的话 handleCheckedCitiesChange (“自定义参数”</description>
    </item>
    
    <item>
      <title>js 循环遍历</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</guid>
      <description>1. for循环 javascript中的for循环选择多种多样，可你知道其中的差别在哪里吗？什么时候又该用哪种循环才是最佳策略？ 1.1 for 1 2 3 4 //20年前的写法let len = myArray.Length for (let index = 0; index &amp;lt; len; index++) { console.log(myArray[index]) } 1.2 forEach 1 2 3</description>
    </item>
    
    <item>
      <title>js 正则表达式</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的&amp;quot;hello&amp;quot;这个子串。 1 2 var regex = /hello/; console.log( regex.test(&amp;#34;hello&amp;#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而</description>
    </item>
    
    <item>
      <title>vue v-if填坑</title>
      <link>https://gaoshanwomeng.github.io/post/vue-v-if%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-v-if%E5%A1%AB%E5%9D%91/</guid>
      <description>在使用v-if控制元素显示隐藏时候，如果判断条件是数组中的元素，在一开始页面渲染显示正常，可以用数组内的变量来控制v-if元素，但是以后通过方法直接改变数组内变量却不能影响v-if控制的元素显示隐藏。</description>
    </item>
    
    <item>
      <title>lodop api文档</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-api%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-api%E6%96%87%E6%A1%A3/</guid>
      <description>1. 控件参数 Lodop有如下控件参数,以页面object对象元素的参数形式使用： Caption 名称：设置控件的显示标题 格式： &amp;lt; pa ram name=&amp;ldquo;Caption&amp;rdquo; value=&amp;ldquo;我是打印控件lodop&amp;rdquo; &amp;gt; 功能： 控件在页面内</description>
    </item>
    
    <item>
      <title>lodop lodop&amp;c-lodop</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-lodopc-lodop/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-lodopc-lodop/</guid>
      <description>转载自：http://www.c-lodop.com/faq/pp21.html 一．安装文件 1.Lodop打印控件安装文件两个: 32位安装程序：install_lodop32.exe； 64位安装程序：</description>
    </item>
    
    <item>
      <title>lodop 控件未安装</title>
      <link>https://gaoshanwomeng.github.io/post/lodop-%E6%8E%A7%E4%BB%B6%E6%9C%AA%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/lodop-%E6%8E%A7%E4%BB%B6%E6%9C%AA%E5%AE%89%E8%A3%85/</guid>
      <description>转载自：http://www.c-lodop.com/faq/pp21.html 高版本的火狐谷歌不再支持np插件方式，需要安装使用C-Lodop，Lodop与C-Lodop的区别参考http://ww</description>
    </item>
    
    <item>
      <title>vue v-model绑定vuex中state数据报错填坑</title>
      <link>https://gaoshanwomeng.github.io/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%95%B0%E6%8D%AE%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</guid>
      <description>1. 代码背景 用vuex管理数据状态，state中有定义 expressTemplate: false, vue的cart页面有使用vant的标签, 提示报错Computed property “expressTemplate” was assigned to but it has no setter. 1 2 3 &amp;lt;el-radio-group v-model=&amp;#34;expressTemplate&amp;#34;&amp;gt; &amp;lt;el-radio v-for=&amp;#34;( item, index ) in expressList&amp;#34; :key=&amp;#34;index&amp;#34;</description>
    </item>
    
    <item>
      <title>ssr&amp;csr</title>
      <link>https://gaoshanwomeng.github.io/post/ssrcsr/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ssrcsr/</guid>
      <description>1. SSR和CSR的概念 SSR(Server Side Rendering)： SSR是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染</description>
    </item>
    
    <item>
      <title>el-table定制选中行样式和展开行样式</title>
      <link>https://gaoshanwomeng.github.io/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</guid>
      <description>1. 变量 变量如下所示： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 data() { return { // 记录选中行 selectRow: [], // 记录展开行 expandRow: [], // 表格数据 id必须有！！ tableData: [ { id: 1, wangwangID: &amp;#39;hahahaha-101&amp;#39;, count: &amp;#39;20&amp;#39;, date:</description>
    </item>
    
    <item>
      <title>elementUI组件二次封装</title>
      <link>https://gaoshanwomeng.github.io/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</guid>
      <description>1. 新建组件 在components文件夹下新建组件，或者可以新建一个UI文件夹，用来专门存放二次封装的UI组件。 2. 编写组件 1. 基本结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;template&amp;gt; &amp;lt;el-dialog class=&amp;#34;dialog-1&amp;#34; &amp;gt; &amp;lt;/el-dialog&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { name: &amp;#34;myDialog1&amp;#34;, props: { },</description>
    </item>
    
    <item>
      <title>markdown中嵌入代码执行工具</title>
      <link>https://gaoshanwomeng.github.io/post/markdown%E4%B8%AD%E5%B5%8C%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/markdown%E4%B8%AD%E5%B5%8C%E5%85%A5%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>和上一篇中插入视频音频一样，我们同样使用iframe标签进行插入。 第一种是我在程序员使用的小工具网站上找到的在线代码编辑器，这种的话允许你修改代码并执行，但是不能更改语言类型，不是很好用： 另一种是一个</description>
    </item>
    
    <item>
      <title>markdown中插入音视频</title>
      <link>https://gaoshanwomeng.github.io/post/markdown%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/markdown%E4%B8%AD%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91/</guid>
      <description>我们之前介绍过typora+picgo+腾讯云的搭配，这使我们在编写markdown文档时可以方便的添加图片，并实现同步上传。那么，如果我们在markdown文档中想要添加一段视频或者音频，我们该如何</description>
    </item>
    
    <item>
      <title>互联网建站全流程</title>
      <link>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%BB%BA%E7%AB%99%E5%85%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%BB%BA%E7%AB%99%E5%85%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>1. 域名 1.1 域名简介 在 Internet 上有千百万台主机，为了区分这些主机，每一台主机都被分配一个 IP 地址。但由于 IP 地址没有实际意义且难于记忆，于是就有了域名（Domain Name）。 域名主要是由英文字母、阿拉伯数字、“ -</description>
    </item>
    
    <item>
      <title>hugo 自定义代码块</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E5%9D%97/</guid>
      <description>1. 自定义代码块样式 根据hugo的官方文档，我们可以看到hugo可以配置使用多种markdown的解析器，hugo markup 配置 其中有一项是highlight的配置： 将官方文档的配置项，放进自己的配置文件中，这</description>
    </item>
    
    <item>
      <title>(转载)机器与人类视觉能力的差距（2）</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D2/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D2/</guid>
      <description>本文属于个人观点，跟本人在职公司的立场无关。由于最近 GitHub 服务器在国内访问速度严重变慢，虽然经过大幅度压缩尺寸，文中的图片仍然可能需要比较长时间才能加载。这篇文章揭示了 AI 领域重要的谬误和不实宣传，为了阻止</description>
    </item>
    
    <item>
      <title>(转载)机器与人类视觉能力的差距（3）</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D3/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D3/</guid>
      <description>本文属于个人观点，跟本人在职公司的立场无关。由于最近 GitHub 服务器在国内访问速度严重变慢，虽然经过大幅度压缩尺寸，文中的图片仍然可能需要比较长时间才能加载。这篇文章揭示了 AI 领域重要的谬误和不实宣传，为了阻止</description>
    </item>
    
    <item>
      <title>git 简介</title>
      <link>https://gaoshanwomeng.github.io/post/git-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/git-%E7%AE%80%E4%BB%8B/</guid>
      <description>1. Git的诞生 转载廖雪峰的官方网站中的部分内容：https://www.liaoxuefeng.com/wiki/896043488029600/896202815778784 很多人都知道，Linus</description>
    </item>
    
    <item>
      <title>字符集和编码</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</guid>
      <description>1. 什么是字符集 在介绍字符集之前，我们先了解下为什么要有字符集。我们在计算机屏幕上看到的是实体化的文字，而在计算机存储介质中存放的实际是二进制的比特流。那么在这两者之间的转换规则就需要一个统一的标准，否</description>
    </item>
    
    <item>
      <title>(转载)机器与人类视觉能力的差距（1）</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D1/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%9C%BA%E5%99%A8%E4%B8%8E%E4%BA%BA%E7%B1%BB%E8%A7%86%E8%A7%89%E8%83%BD%E5%8A%9B%E7%9A%84%E5%B7%AE%E8%B7%9D1/</guid>
      <description>本文属于个人观点，跟本人在职公司的立场无关。由于最近 GitHub 服务器在国内访问速度严重变慢，虽然经过大幅度压缩尺寸，文中的图片仍然可能需要比较长时间才能加载。这篇文章揭示了 AI 领域重要的谬误和不实宣传，为了阻止</description>
    </item>
    
    <item>
      <title>(转载)清华梦的破碎</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7/</guid>
      <description>有人听说我想创业，给我提出了一些“忽悠”的办法。他们说，既然你是程序语言专家，而现在人工智能（AI）又非常热，那你其实可以搞一个“自动编程系统”，号称可以自动生成程序，取代程序员的工作，节省许许多多的</description>
    </item>
    
    <item>
      <title>(转载)cornell感受</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BDcornell%E6%84%9F%E5%8F%97/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BDcornell%E6%84%9F%E5%8F%97/</guid>
      <description>早就有人问起我的学习情况，问我有没有找到理想的研究环境。我却总是弄一些小动物，要不就是好玩的内容在这上面。真是惭愧，因为一直觉得自己还没有什么发言权，一直觉得是不是自己搞错了。不过来了 Cornell 已经一年半，也</description>
    </item>
    
    <item>
      <title>(转载)写给支持和反对完全用Linux工作的人们</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E5%86%99%E7%BB%99%E6%94%AF%E6%8C%81%E5%92%8C%E5%8F%8D%E5%AF%B9%E5%AE%8C%E5%85%A8%E7%94%A8linux%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%BA%BA%E4%BB%AC/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E5%86%99%E7%BB%99%E6%94%AF%E6%8C%81%E5%92%8C%E5%8F%8D%E5%AF%B9%E5%AE%8C%E5%85%A8%E7%94%A8linux%E5%B7%A5%E4%BD%9C%E7%9A%84%E4%BA%BA%E4%BB%AC/</guid>
      <description>在一阵阵唾骂和欢呼声中，《完全用linux工作》被转载到了天涯海角。很多人支持我，也有很多人唾骂我。我不知道它是怎样流传到那么多地方，其实我不知道它都被转到哪里去了…… 我知道现在这篇文章又会罗里罗索写</description>
    </item>
    
    <item>
      <title>(转载)完全用Linux工作</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E5%AE%8C%E5%85%A8%E7%94%A8linux%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E5%AE%8C%E5%85%A8%E7%94%A8linux%E5%B7%A5%E4%BD%9C/</guid>
      <description>UNIX 是简单的，你不需要成为天才也能理解这种简单 由于GNU/Linux这个词太长，下面如果没有特别指明，“Linux”就是指“GNU/Linux”。 在这个年代，恐怕没有人需要我来介绍 Linux 是什么了吧？如果你觉</description>
    </item>
    
    <item>
      <title>(转载)清华梦的破碎</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%B8%85%E5%8D%8E%E6%A2%A6%E7%9A%84%E7%A0%B4%E7%A2%8E/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%BD%AC%E8%BD%BD%E6%B8%85%E5%8D%8E%E6%A2%A6%E7%9A%84%E7%A0%B4%E7%A2%8E/</guid>
      <description>清华梦的诞生 小时候，妈妈给我一个梦。她指着一个大哥哥的照片对我说，这是爸爸的学生，他考上了清华大学，他是我们中学的骄傲。长大后，你也要进入清华大学读书，为我们家争光。我不知道清华是什么样子，但是我知道</description>
    </item>
    
    <item>
      <title>mongoose使用教程</title>
      <link>https://gaoshanwomeng.github.io/post/mongoose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/mongoose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>1.连接数据库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 引入安装的包 var mongoose = require(&amp;#39;mongoose&amp;#39;); mongoose.connect(&amp;#39;mongodb://localhost/mongoo&amp;#39;); //mongoo这里是代表数据库的名称 var db = mongoose.connection; db.on(&amp;#39;error&amp;#39;, console.error.bind(console, &amp;#39;连接失败&amp;#39;)); db.once(&amp;#39;open&amp;#39;, function() { console.log(&amp;#39;连接</description>
    </item>
    
    <item>
      <title>redis简介</title>
      <link>https://gaoshanwomeng.github.io/post/redis%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/redis%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是Redis Redis全称REmote DIctionary Server( 远程字典服务器 ) ，是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis遵守BSD协议、支持网络、可基于内存亦可持久化</description>
    </item>
    
    <item>
      <title>mongoDB简介</title>
      <link>https://gaoshanwomeng.github.io/post/mongodb%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/mongodb%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 我们常用的数据库有哪些？ MySQL和MariaDB； Oracle； SQL Server； 上面的三个是最流行的数据库，也是我们开发时频繁的使用数据库。 MySQL是关系型数据库管理系统。 Oracle全称Ora</description>
    </item>
    
    <item>
      <title>node&amp;npm简介</title>
      <link>https://gaoshanwomeng.github.io/post/nodenpm%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/nodenpm%E7%AE%80%E4%BB%8B/</guid>
      <description>1.jacascript JavaScript和ECMAScript通常被人用来表达相同的意思，但JavaScript的含义去比ECMA-262中规定的多得多。一个完整的JavaScript实现应由三个部分组成： 核心（ECM</description>
    </item>
    
    <item>
      <title>ajax 预检请求</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</guid>
      <description>1.什么是预检请求 定义：预检请求（Preflighted requests ）是浏览器发起跨域请求时，通过OPTIONS方法询问服务器对跨域请求的支持情况（支持的包含请求方法、请求头、数据类型）。 2.什么时候会触发预检</description>
    </item>
    
    <item>
      <title>ajax xhr</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-xhr/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-xhr/</guid>
      <description>1. XMLHTTPRequest（xhr） XMLHTTPRequest对象，顾名思义：是基于XML的HTTP请求。我们在浏览器中使用XMLHTTPRequest对象在服务器之间通信，传输的数据是使用XM</description>
    </item>
    
    <item>
      <title>前后端分离简介</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 前后端不分离 我们先看看一个 Web 系统，在前后端不分离时架构设计是什么样的： 用户在浏览器上发送请求，服务器端接收到请求，根据 Header 中的 token 进行用户鉴权，从数据库取出数据，处理后将结果数据填入 HTML 模板，返回给浏览器</description>
    </item>
    
    <item>
      <title>跨域访问简介</title>
      <link>https://gaoshanwomeng.github.io/post/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E8%B7%A8%E5%9F%9F%E8%AE%BF%E9%97%AE%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 前后端跨域 随着前后端分离技术的越来越盛行，跨域问题也逐渐凸显了出来。跨域问题的根本原因：因为浏览器收到同源策略的限制，当前域名的js只能读取同域下的窗口属性。什么叫做同源策略？就是不同的域名, 不同端</description>
    </item>
    
    <item>
      <title>flash简介</title>
      <link>https://gaoshanwomeng.github.io/post/flash%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/flash%E7%AE%80%E4%BB%8B/</guid>
      <description>Flash是一种交互式矢量图和Web动画的标准，它可以用来制作动画或者播放视频。作为一款诞生20多年的产品，Flash当然也有过它的巅峰。无数优质的Flash动画和游戏，在那个时代，Flash似乎就是</description>
    </item>
    
    <item>
      <title>html5&amp;html&amp;h5</title>
      <link>https://gaoshanwomeng.github.io/post/html5htmlh5/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/html5htmlh5/</guid>
      <description>1.官方解释 1.1 html HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组</description>
    </item>
    
    <item>
      <title>svg简介</title>
      <link>https://gaoshanwomeng.github.io/post/svg%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/svg%E7%AE%80%E4%BB%8B/</guid>
      <description>1.官方解释 SVG是一种图像文件格式，它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形。它是基于XML（Extensible Markup Language），由World Wide Web Consort</description>
    </item>
    
    <item>
      <title>w3c简介</title>
      <link>https://gaoshanwomeng.github.io/post/w3c%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/w3c%E7%AE%80%E4%BB%8B/</guid>
      <description>W3C，这个建立于 1994 年的组织，其宗旨是通过促进通用协议的发展并确保其通用型，以激发 web 世界的全部潜能 1.W3C 是什么？ W3C 指万维网联盟（World Wide Web Consortium） W3C 创建于1994年10月 W3C 由 Tim Berners-Lee 创建 W3C 是</description>
    </item>
    
    <item>
      <title>javaweb ssm</title>
      <link>https://gaoshanwomeng.github.io/post/javaweb-ssm/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javaweb-ssm/</guid>
      <description>1.1、Spring ​ Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为</description>
    </item>
    
    <item>
      <title>javaweb servlet</title>
      <link>https://gaoshanwomeng.github.io/post/javaweb-servlet/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javaweb-servlet/</guid>
      <description>1.什么是servlet servlet接口定义的是一套处理网络请求的规范，所有实现servlet的类，都需要实现它那五个方法，其中最主要的是两个生命周期方法 init()和destroy()，还有一个处</description>
    </item>
    
    <item>
      <title>vue vuex中的modules使用</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuex%E4%B8%AD%E7%9A%84modules%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuex%E4%B8%AD%E7%9A%84modules%E4%BD%BF%E7%94%A8/</guid>
      <description>转载链接：https://www.cnblogs.com/codebook/p/13416465.html 这篇文章主要介绍了vuex中modules的基本用法。 1. store文件结构 1 2 3 4 5 6 7 - src -</description>
    </item>
    
    <item>
      <title>vue slot简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-slot%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-slot%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是插槽？ 插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组</description>
    </item>
    
    <item>
      <title>vue vuex简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuex%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuex%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Vuex概述 Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享 使用Vuex管理数据的好处： A.能够在vuex中集中管理共享的数据，便于开发和后期进行维护 B.能够高效</description>
    </item>
    
    <item>
      <title>opencv 腐蚀与膨胀</title>
      <link>https://gaoshanwomeng.github.io/post/opencv-%E8%85%90%E8%9A%80%E4%B8%8E%E8%86%A8%E8%83%80/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/opencv-%E8%85%90%E8%9A%80%E4%B8%8E%E8%86%A8%E8%83%80/</guid>
      <description>形态学操作 简单来讲，形态学操作就是基于形状的一系列图像处理操作。通过将 结构元素 作用于输入图像来产生输出图像。 最基本的形态学操作有二：腐蚀与膨胀(Erosion 与 Dilation)。 他们的运用广泛: 消除</description>
    </item>
    
    <item>
      <title>ecmascript&amp;javascript</title>
      <link>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ecmascriptjavascript/</guid>
      <description>1. ECMAScript的简介 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这</description>
    </item>
    
    <item>
      <title>图像识别工程搭建步骤</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</guid>
      <description>1. 数据准备 一般分为5个步骤 拍摄照片或者下载数据集； 图像标注； 图像数据处理： 图像合成、图像裁剪、改变图像像素大小； 检查标注文件的正确性； 划分训练集、验证集； 2. 搭建神经网络 3. 训练模型 读取数据的多线程生成器</description>
    </item>
    
    <item>
      <title>数据库与数据仓库</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</guid>
      <description>1.基本概念 了解数据库与数据仓库的区别之前，首先掌握三个概念。数据库软件、数据库、数据仓库。 数据库软件：是一种软件，可以看得见，可以操作。用来实现数据库逻辑功能。属于物理层。 数据库：是一种逻辑概念，用</description>
    </item>
    
    <item>
      <title>javase jdk&amp;jre</title>
      <link>https://gaoshanwomeng.github.io/post/javase-jdkjre/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-jdkjre/</guid>
      <description>1.jre JRE是Java Runtime Environment的缩写，顾名思义是java运行时环境。 包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用</description>
    </item>
    
    <item>
      <title>javase 本地方法和本地方法栈</title>
      <link>https://gaoshanwomeng.github.io/post/javase-%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</guid>
      <description>1.什么是本地方法 在Java中，有些方法涉及到与操作系统交互，获取和使用操作系统的硬件或软件的资源，单纯的用Java实现要么实现很困难，或者不能实现，这时候就要使用本地方法，本地方法就是用其他语言写的</description>
    </item>
    
    <item>
      <title>javase jvm</title>
      <link>https://gaoshanwomeng.github.io/post/javase-jvm/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-jvm/</guid>
      <description>一. 什么是jvm java中的jvm又称java虚拟机。java之所以是跨平台的编程语言，和jvm有很大的关系。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。在引入了jvm后，j</description>
    </item>
    
    <item>
      <title>javase jdbc</title>
      <link>https://gaoshanwomeng.github.io/post/javase-jdbc/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-jdbc/</guid>
      <description>1.相关概念 1.什么是JDBC JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写</description>
    </item>
    
    <item>
      <title>javase 测试和反射</title>
      <link>https://gaoshanwomeng.github.io/post/javase-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-%E6%B5%8B%E8%AF%95%E5%92%8C%E5%8F%8D%E5%B0%84/</guid>
      <description>Junit单元测试 测试分类 黑盒测试 白盒测试 区别 黑盒测试不需要写代码，给出输入，看结果是否符合输出 白盒测试需要写代码关注程序的具体执行流程 Junit单元测试 Junit单元测试为白盒测试 使用步骤 具体导入环</description>
    </item>
    
    <item>
      <title>javase 编译执行</title>
      <link>https://gaoshanwomeng.github.io/post/javase-%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/javase-%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/</guid>
      <description></description>
    </item>
    
    <item>
      <title>js let&amp;const&amp;var</title>
      <link>https://gaoshanwomeng.github.io/post/js-letconstvar/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-letconstvar/</guid>
      <description>1. let，const没有变量提升 首先让我们了解下JavaScript变量赋值的大概过程： 1 2 3 4 5 6 7 8 9 10 11 12 ECStack EC(G) VO(G) 声明提升(函数+变量) 1. 函数声明提升 2. 变量声明提升 变量赋值： 1. 创建变量 2. 创建值(对</description>
    </item>
    
    <item>
      <title>ts 断点调试</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</guid>
      <description>1.什么是断点 断点是程序暂停执行的位置，调试时程序运行到此处，就会暂停。 2.vscode中配置ts调试 在vscode中选择运行，然后选择添加配置： 在launch.json里写入一下内容 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>ts ts与vue</title>
      <link>https://gaoshanwomeng.github.io/post/ts-ts%E4%B8%8Evue/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-ts%E4%B8%8Evue/</guid>
      <description>1.为什么是TS+VUE 前端正处在逐步挺进企业级开发业务的过程中，强类型的TS已经广泛的使用起来，而脚手架工具也是前端工程化的基础。 2.使用vuecli脚手架创建项目 1.创建项目 1 vue create 项目名 2.安装v</description>
    </item>
    
    <item>
      <title>ts 类与对象</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid>
      <description>下面我们建一个类：class Duck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Duck { DuckName: string; Age: number; Fly: string; constructor(duckName: string, age: number, fly: string) { this.DuckName = duckName; this.Age = age; this.Fly = fly; } greet() { let outString: string = &amp;#34;我是鸭子，我的名字是&amp;#34; + this.DuckName + &amp;#34;，我现在&amp;#34;</description>
    </item>
    
    <item>
      <title>js 箭头函数</title>
      <link>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/js-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</guid>
      <description>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 为什么叫Arrow Function？因为它的定义用的就是一个箭头： 1 x =&amp;gt; x * x 上面的箭头函数相当于： 1 2 3 function (x) { return x * x; } 箭头函数</description>
    </item>
    
    <item>
      <title>socket简介</title>
      <link>https://gaoshanwomeng.github.io/post/socket%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/socket%E7%AE%80%E4%BB%8B/</guid>
      <description>网络编程就是编写程序使两台联网的计算机相互交换数据。这就是全部内容了吗？是的！网络编程要比想象中的简单许多。 那么，这两台计算机之间用什么传输数据呢？首先需要物理连接。如今大部分计算机都已经连接到互联网</description>
    </item>
    
    <item>
      <title>浏览器 localStorage&amp;sessionStorage&amp;cookie</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-localstoragesessionstoragecookie/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%B5%8F%E8%A7%88%E5%99%A8-localstoragesessionstoragecookie/</guid>
      <description>1. 基本概念 Cookie Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身</description>
    </item>
    
    <item>
      <title>ts 基础语法</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>1.变量与数据类型 1.声明变量 在js中变量是不区分类型的，这一点在ts中做出了改变，ts规定变量在声明时必须规定好这个变量的数据类型，并以:的形式进行指定。 2.数据类型 JavaScript 的类型分为两种：原始数据类型（</description>
    </item>
    
    <item>
      <title>ts 安装和配置</title>
      <link>https://gaoshanwomeng.github.io/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>1.TS简介 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。 其次引用官网的定义： TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上</description>
    </item>
    
    <item>
      <title>互联网运作方式</title>
      <link>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E4%BA%92%E8%81%94%E7%BD%91%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F/</guid>
      <description>1.举例 我们以我们使用浏览器访问bilibili这个网站为例，来看一下我们是如何使用互联网来发送和接收数据的。 当我的个人电脑接入互联网之后，我的电脑会得到一个编号用来标识我这台电脑的身份，这个编号地址</description>
    </item>
    
    <item>
      <title>docker基本操作</title>
      <link>https://gaoshanwomeng.github.io/post/docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/docker%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>1.安装docker 不同的linux发行版使用不同的包管理器，因此安装docker的命令不同。 红帽系：CentOS，Fedora 1 2 3 4 yum -y install yum-utils device-mapper-persistent-data lvm2 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum makacache fast yum -y install docker-ce arch系：Arch Linux，</description>
    </item>
    
    <item>
      <title>docker简介</title>
      <link>https://gaoshanwomeng.github.io/post/docker%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/docker%E7%AE%80%E4%BB%8B/</guid>
      <description>1.为什么使用docker 在实际的开发中，我们常常会遇到如下几个问题： 一个项目，我本地运行没有问题，换一台电脑运行就不好用了。这就会引起开发人员和测试人员的冲突。 在发生海量并发时，比如天猫双十一，我们</description>
    </item>
    
    <item>
      <title>thinkphp数据库缓存问题</title>
      <link>https://gaoshanwomeng.github.io/post/thinkphp%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/thinkphp%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</guid>
      <description>1.问题 在使用thinkphp作为后端的框架时，对于一个我们一直在使用的数据库，如果我们中途对数据库中某个表进行字段的添加，那么会出现一种情况是我们需要对这个新添加的字段进行操作时，会提示非法字段，也</description>
    </item>
    
    <item>
      <title>linux manjaro配置lnmp环境</title>
      <link>https://gaoshanwomeng.github.io/post/linux-manjaro%E9%85%8D%E7%BD%AElnmp%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-manjaro%E9%85%8D%E7%BD%AElnmp%E7%8E%AF%E5%A2%83/</guid>
      <description>1.MariaDB(mysql) 1.安装MariaDB 1 sudo pacman -S mariadb 2.配置MariaDB 1 sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql 2.php7 1.安装php7 1 sudo pacman -S php-fpm 2.配置php 编辑 /etc/php/php.ini配置文件。 1 sudo vim /etc/php/php.ini 找到如下两行文字，去掉前面的#符号以</description>
    </item>
    
    <item>
      <title>linux 自制百度脑图客户端</title>
      <link>https://gaoshanwomeng.github.io/post/linux-%E8%87%AA%E5%88%B6%E7%99%BE%E5%BA%A6%E8%84%91%E5%9B%BE%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-%E8%87%AA%E5%88%B6%E7%99%BE%E5%BA%A6%E8%84%91%E5%9B%BE%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>linux平台有很多思维导图软件可以使用，包括xmind，mindmaster这种知名软件，以及freemind，view your mind这类开源软件。但是在实际使用中，xmind是收费的，mindmast</description>
    </item>
    
    <item>
      <title>ajax axios发送post请求踩坑记录</title>
      <link>https://gaoshanwomeng.github.io/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</guid>
      <description>使用axios发送post请求，在后端接收不到传过来的参数，多方查证无果，最终找到了这篇文章，转载过来作为记录。 作者：Never Yu丶 文章：axios 发 post 请求，后端接收不到参数的解决方案 链接：http</description>
    </item>
    
    <item>
      <title>linux kwin添加窗口阴影</title>
      <link>https://gaoshanwomeng.github.io/post/linux-kwin%E6%B7%BB%E5%8A%A0%E7%AA%97%E5%8F%A3%E9%98%B4%E5%BD%B1/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-kwin%E6%B7%BB%E5%8A%A0%E7%AA%97%E5%8F%A3%E9%98%B4%E5%BD%B1/</guid>
      <description>kde桌面环境下，有一些软件打开后窗口没有阴影效果，和其他窗口放在一起感觉很违和，怎么美化这些窗口，让他们看起来和其他的窗口拥有统一的风格呢？答案是使用kwin的窗口规则来定制。 这里我们以网易云音乐为</description>
    </item>
    
    <item>
      <title>linux wine简介</title>
      <link>https://gaoshanwomeng.github.io/post/linux-wine%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-wine%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是Wine Wine是在x86、x86-64容许类Unix操作系统在X Window System运行Microsoft Windows程序的软件。另外，Wine也提供程序运行库（Winelib）来帮助计算机程</description>
    </item>
    
    <item>
      <title>linux debtap简介</title>
      <link>https://gaoshanwomeng.github.io/post/linux-debtap%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-debtap%E7%AE%80%E4%BB%8B/</guid>
      <description>1.什么是debtap debtap是一个将.deb包转化为.pkg.tar.zst的工具，从而实现了在arch上安装debian的软件。由于ubuntu的盛行，很多软件都会有专门的.deb安装包，我们</description>
    </item>
    
    <item>
      <title>electron简介</title>
      <link>https://gaoshanwomeng.github.io/post/electron%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/electron%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Electron 是什么 1.Electron定义 Electron是一个能让你使用传统前端技术（Nodejs, Javascript, HTML, CSS）开发一个跨平台桌面应用的框架。这里所说的桌面应用指的是在Windows、OSX及Linux系统上</description>
    </item>
    
    <item>
      <title>linux manjaro初始化</title>
      <link>https://gaoshanwomeng.github.io/post/linux-manjaro%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-manjaro%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>1.换源 1 2 3 sudo pacman-mirrors -i -c China -m rank sudo pacman -Syy sudo vi /etc/pacman.conf 修改/etc/pacman.conf,在最后一行添加： 1 2 3 [archlinuxcn] SigLevel = Optional TrustedOnly Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch 安装archlinuxcn签名钥匙： 1 2 sudo pacman -S archlinuxcn-keyring sudo pacman -Syy 2.安装yay yay 是用 Go 编写的 Arch</description>
    </item>
    
    <item>
      <title>linux aur简介</title>
      <link>https://gaoshanwomeng.github.io/post/linux-aur%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-aur%E7%AE%80%E4%BB%8B/</guid>
      <description>1.pacman 在介绍 AUR 之前，先了解一些pacman基础知识。Arch Linux 使用 pacman 作为包管理器，它在提供了一个简单的包管理器的同时，页提供了一个易用的包构建系统，使用户能够轻松地管理和定制官方提供的、用户自己制作的、甚</description>
    </item>
    
    <item>
      <title>manjaro&#43;ubuntu&#43;win10三系统安装</title>
      <link>https://gaoshanwomeng.github.io/post/manjaro&#43;ubuntu&#43;win10%E4%B8%89%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/manjaro&#43;ubuntu&#43;win10%E4%B8%89%E7%B3%BB%E7%BB%9F/</guid>
      <description>在同一台电脑里安装ubuntu18.04，manjaro20.0.3，win10三个系统，记录一下具体操作，以免以后还会用到。 1.安装windows ubuntu 关于安装win10和ubuntu18.04双系统的</description>
    </item>
    
    <item>
      <title>偏差与方差</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE/</guid>
      <description>1.偏差bias bias描述的是根据样本拟合出的模型的输出预测结果的期望与样本真实结果的差距。 简单讲，就是在样本上拟合的好不好。要想在bias上表现好，low bias，就得复杂化模型，增加模型的参数，</description>
    </item>
    
    <item>
      <title>正则化解决过拟合</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%AD%A3%E5%88%99%E5%8C%96%E8%A7%A3%E5%86%B3%E8%BF%87%E6%8B%9F%E5%90%88/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%AD%A3%E5%88%99%E5%8C%96%E8%A7%A3%E5%86%B3%E8%BF%87%E6%8B%9F%E5%90%88/</guid>
      <description>1.过拟合 1.什么是过拟合 underfitting通常是针对训练集，例如我们的预测pattern过于平滑（e.g直线来拟合多个输入点），也就是模型过于简单，这个通常可以通过引入多项式，或者神经网络等复</description>
    </item>
    
    <item>
      <title>MNIST手写数字识别</title>
      <link>https://gaoshanwomeng.github.io/post/mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/mnist%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</guid>
      <description>1.MNIST简介 MNIST 包括6万张28x28的训练样本，1万张测试样本，可以说它就是计算机视觉里面的Hello World。所以我也来用用MNIST。 2.实现思想 经过前一次关于梯度下降算法的学习，我们可以使</description>
    </item>
    
    <item>
      <title>pytorch简介</title>
      <link>https://gaoshanwomeng.github.io/post/pytorch%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/pytorch%E7%AE%80%E4%BB%8B/</guid>
      <description>1.机器学习与深度学习 人工智能的浪潮正席卷全球，诸多词汇时刻萦绕在我们的耳边，如人工智能，机器学习，深度学习等。“人工智能”的概念早在1956年就被提出，顾名思义用计算机来构造复杂的，拥有与人类智慧同</description>
    </item>
    
    <item>
      <title>梯度下降算法</title>
      <link>https://gaoshanwomeng.github.io/post/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</guid>
      <description>梯度下降（gradient descent）在机器学习中应用十分的广泛，不论是在线性回归还是Logistic回归中，它的主要目的是通过迭代找到目标函数的最小值，或者收敛到最小值。 1.算法思想 梯度下降法的</description>
    </item>
    
    <item>
      <title>vue vuecli简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-vuecli%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-vuecli%E7%AE%80%E4%BB%8B/</guid>
      <description>1.vue-cli简介 vue-cli俗称脚手架，可以快速创建vue项目结构，学习完webpack之后，我们会有一种体会就是项目的每个文件夹，每个文件都需要我们手动新建，小项目还好，如果遇到复杂的大项目</description>
    </item>
    
    <item>
      <title>vue 实战案例2</title>
      <link>https://gaoshanwomeng.github.io/post/vue-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B2/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B2/</guid>
      <description>1.新建项目 新建一个项目project02，需要安装router，linter，bable，elementUI，axios。 关于新建项目，可以看一下另一篇文章vue-cli基础，里面没有提到axios</description>
    </item>
    
    <item>
      <title>vue 实战案例</title>
      <link>https://gaoshanwomeng.github.io/post/vue-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/</guid>
      <description>1.案例演示 2.功能拆分 英雄列表，列表展示，添加英雄，编辑英雄，删除英雄。 3.首页展示 1.步骤分析 导入素材: 将课程包中index.html的标签结构放在App.vue的template中 安装boots</description>
    </item>
    
    <item>
      <title>vue 简介</title>
      <link>https://gaoshanwomeng.github.io/post/vue-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/vue-%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Vue快速体验 1.Vue介绍 1.Vue是什么 Vue.js是优秀的前端 JavaScript 框架 Vue.js是一套构建用户界面的渐进式框架，Vue只关注视图层， 采用自底向上增量开发的设计，Vue 的目标是通过尽可能简单的</description>
    </item>
    
    <item>
      <title>hugo algolia搜索</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-algolia%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-algolia%E6%90%9C%E7%B4%A2/</guid>
      <description>1.algolia简介 Algolia是一家为网站与移动应用提供托管式搜索API的初创企业，Algolia的服务支持多种语言支持Ruby、Rails、Python、PHP、JS、Java、Android</description>
    </item>
    
    <item>
      <title>微信小程序开发基础</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</guid>
      <description>1.微信小程序简介 1.小程序和网页的区别 js操作不同 微信小程序里没有DOM和BOM，非常像vue，但是vue是有但是不用，而小程序是直接没有，这导致了我们平时使用的库很多也都不能用，比如jQuery等</description>
    </item>
    
    <item>
      <title>hugo 生成toc导航</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E7%94%9F%E6%88%90toc%E5%AF%BC%E8%88%AA/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E7%94%9F%E6%88%90toc%E5%AF%BC%E8%88%AA/</guid>
      <description>1.hugo自带toc模版 hugo本身带有生成文章导航的功能，使用{{ .TableOfContents}}变量，会在页面中渲染出id为TableOfContents的nav样式。 1.使用方法 官方文档给</description>
    </item>
    
    <item>
      <title>腾讯云cos收费详解</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E8%85%BE%E8%AE%AF%E4%BA%91cos%E6%94%B6%E8%B4%B9%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E8%85%BE%E8%AE%AF%E4%BA%91cos%E6%94%B6%E8%B4%B9%E8%AF%A6%E8%A7%A3/</guid>
      <description>1.新用户免费额度 在17，18年的时候，腾讯云的免费额度是很丰富的，作为个人用户也是完全够用的： 但是现在的免费额度早就发生了变化，个人用户只有免费的每月50G存储空间，持续6个月。也就是说，这半年里，</description>
    </item>
    
    <item>
      <title>hugo valine评论</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-valine%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-valine%E8%AF%84%E8%AE%BA/</guid>
      <description>1.注册LeanCloud 官网地址：https://www.leancloud.cn/ 注册页面： 验证邮箱和是实名认证 2.配置LeanCloud 创建应用 获取AppID和AppKey 3.修改配置文件 在co</description>
    </item>
    
    <item>
      <title>typora picgo上传图床</title>
      <link>https://gaoshanwomeng.github.io/post/picgo-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/picgo-typora%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%BA%8A/</guid>
      <description>1. 安装picgo-core 直接在typora里面安装picgo-core，选择下载或更新。 2. 配置picgo-core 打开配置文件，在配置文件里填入以下内容： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { &amp;#34;picBed&amp;#34;: { &amp;#34;uploader&amp;#34;: &amp;#34;tcyun&amp;#34;, &amp;#34;tcyun&amp;#34;:</description>
    </item>
    
    <item>
      <title>腾讯云作为个人博客图床</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E8%85%BE%E8%AE%AF%E4%BA%91%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</guid>
      <description>1.为什么选择腾讯云 我分别用了SMMS，七牛云，gitee pages自己搭建等方式，每一种都有不能忍受的缺点： SMMS 速度会抽风，在个别时间段会很慢，甚至加载不动。 安全性没有保障，不需要登陆自己的账号，直接</description>
    </item>
    
    <item>
      <title>opencv&amp;notebook</title>
      <link>https://gaoshanwomeng.github.io/post/opencvnotebook/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/opencvnotebook/</guid>
      <description>1.安装opencv-python 关于版本，在网上查到的一种说法是3.4.2之后的opencv版本好像涉及到一些专利问题，有些东西是没有的，所以我决定安装3.4.1😙。 1.pip安装指定版本 1 pip3 install -i https://pypi.douban.com/simple</description>
    </item>
    
    <item>
      <title>图像处理的基本操作</title>
      <link>https://gaoshanwomeng.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>1. 读取图像并显示 1 2 3 src = cv.imread(&amp;#34;图片路径&amp;#34;) cv.namedWindow(&amp;#34;input image&amp;#34;, cv.WINDOW_AUTOSIZE) cv.imshow(&amp;#34;input image&amp;#34;, src) 2. 读取摄像头信息 1 2 3 4 5 6 7 8 9 def video_demo(): capture = cv.VideoCapture(0) while(True): ret, frame = capture.read() frame = cv.flip(frame, 1) cv.imshow(&amp;#34;video&amp;#34;, frame) c = cv.waitKey(50) if c == 27: break 3. 图像像素反转 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>hugo 使用emoji​​</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-%E4%BD%BF%E7%94%A8emoji/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-%E4%BD%BF%E7%94%A8emoji/</guid>
      <description>自己搭建的博客一直不能显示emoji，现在记录一下在hugo博客中怎么开启emoji支持。 1. config.toml配置 在config.toml中进行配置 1 enableEmoji = true 2. 添加CSS样式 在网页的CSS文件中加入</description>
    </item>
    
    <item>
      <title>linux 搭建机器学习开发环境</title>
      <link>https://gaoshanwomeng.github.io/post/linux-%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-%E6%90%AD%E5%BB%BA%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</guid>
      <description>1.检查显卡驱动 安装cuda和cudnn之前要要检查系统现在使用的显卡驱动是不是闭源驱动。 1 2 3 4 5 lsmod | grep nouveau 如果没有输出说明nouveau是禁用状态 nvidia-smi 有输出说明驱动安装的是没有问题的，版本为440 如果</description>
    </item>
    
    <item>
      <title>linux vim简介</title>
      <link>https://gaoshanwomeng.github.io/post/linux-vim%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/linux-vim%E7%AE%80%E4%BB%8B/</guid>
      <description>1.了解vim vim是最好的编辑之一，拥有以下几个优点： 高效率移动，使用vim的命令模式，可以让光标到达你想要的任何地方 高效率输入 vim可以进行关键词自动提示，输入几个字母然后按住ctrl+n，可以自</description>
    </item>
    
    <item>
      <title>hugo gitee搭建博客</title>
      <link>https://gaoshanwomeng.github.io/post/hugo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/hugo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>hugo官网：https://gohugo.io/ hugo主题：https://themes.gohugo.io/ 1.安装hugo 在hugo的git仓库下载最新版本 ubuntu系统选择hugo_0.7</description>
    </item>
    
    <item>
      <title>typora常用快捷键</title>
      <link>https://gaoshanwomeng.github.io/post/typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>ctrl+0~4 一级到四级标题 ctrl+b 加粗 ctrl+i 斜体 ctrl+u 下划线 shift+alt+5 删除线 ctrl+k 超链接 锚点以#开头 ctrl+t 插入表格 name age school tom 11 mit jack 12 nnce ctrl+shift+q 引用 (直接用&amp;gt;更加快捷) 引用 ctrl+shift+i 插入图片 3个`+对应语言，插入代码块 1 print(&amp;#34;hahaah&amp;#34;) +/*/- 生成无序列表，用tab生成多</description>
    </item>
    
    <item>
      <title>win10&#43;ubuntu18.04双系统</title>
      <link>https://gaoshanwomeng.github.io/post/win10&#43;ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/post/win10&#43;ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</guid>
      <description>1.下载ubuntu系统 ubuntu官网下载镜像：https://ubuntu.com/download/desktop 目前ubuntu20.04LST版本已经发布，但安装过程和18.04LST应该没</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://gaoshanwomeng.github.io/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gaoshanwomeng.github.io/links/</guid>
      <description>导航： Vue.js Vue CLI Vue Template Explorer Node.js webpack elementUI React Create React App Ant Design Web前端导航 iconfont Less ECharts 程序员在线工具</description>
    </item>
    
  </channel>
</rss>
