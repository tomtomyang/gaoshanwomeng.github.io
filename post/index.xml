<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TomtomYoung Blog</title>
    <link>https://tomtomyoung.top/post/</link>
    <description>Recent content in Posts on TomtomYoung Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Sep 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tomtomyoung.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机网络 http1.0http1.1http2.0对比</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http1.0http1.1http2.0%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http1.0http1.1http2.0%E5%AF%B9%E6%AF%94/</guid>
      <description>参考： web前端面试 - 面试官系列 1. HTTP 1.0 HTTP 1.0 是一种无状态，无连接的应用层协议。 HTTP 1.0 规定浏览器和服务器保持短暂的链接。 HTTP 属于 TCP/IP 模型中的应用层协议，而两个应用程序（我们这里指的就是浏览器与服务器）之间要进行</description>
    </item>
    
    <item>
      <title>计算机网络 https详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-https%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-https%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. HTTPS HTTP在通信过程中，存在以下问题： 通信使用明文（不加密），内容可能被窃听 不验证通信方的身份，因此有可能遭遇伪装 这并不安全，HTTPS出现正是为了解决HTTP不安全的问题。 为了保证这些隐私数据能加</description>
    </item>
    
    <item>
      <title>计算机网络 tcp详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-tcp%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-tcp%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： TCP 详解 TCP为什么要三次握手？ TCP协议详解（一）：TCP头部结构 1. TCP 定义 TCP(Transmission Control Protocol 传输控制协议)是一种基于连接的、点对点的、 面向字节流的、基于IP的传输层协议。TCP在IP报文的协议号是6。 1. 基于</description>
    </item>
    
    <item>
      <title>react Fiber详解</title>
      <link>https://tomtomyoung.top/post/react-fiber%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-fiber%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 走进React Fiber的世界 手写React的Fiber架构，深入理解其原理 1. 背景 在之前的《react react 时间切片与requestIdleCallback详解》中，我们了解到 React 为了解决浏览器性能瓶</description>
    </item>
    
    <item>
      <title>react 手写react16.x组件渲染</title>
      <link>https://tomtomyoung.top/post/react-%E6%89%8B%E5%86%99react16.x%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E6%89%8B%E5%86%99react16.x%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93/</guid>
      <description>参考： 8月更文挑战｜react手写实现渲染JSX普通版 手写一个简单的 React 手写一个react系列（一）：实现react和react-dom 手写 react 核心源码 面试装不了逼？当场手写个react16.x框架给他看</description>
    </item>
    
    <item>
      <title>react 时间切片与requestIdleCallback详解</title>
      <link>https://tomtomyoung.top/post/react-%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E4%B8%8Erequestidlecallback%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E6%97%B6%E9%97%B4%E5%88%87%E7%89%87%E4%B8%8Erequestidlecallback%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 走进React Fiber的世界 1. 浏览器性能瓶颈 我们日常使用App，浏览网页时，有两类场景会制约快速响应： 当遇到大计算量的操作或者设备性能不足使页面掉帧，导致卡顿。 发送网络请求后，由于需要等待数据</description>
    </item>
    
    <item>
      <title>react 函数式编程范式</title>
      <link>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid>
      <description>参考： React躬行记（1）——函数式编程 React世界的函数式编程(Functional Programming) 1. 函数式编程定义 函数式编程（Functional Programming）不是一种新的框架或工具，而是一种以函</description>
    </item>
    
    <item>
      <title>react 函数组件详解</title>
      <link>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： React 函数组件详解 hooks和类组件的区别 为什么 React 现在要推行函数式组件，用 class 不好吗？ 谈谈react hooks的优缺点 React Hooks 详解 React中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return &amp;lt;h1&amp;gt</description>
    </item>
    
    <item>
      <title>js Class详解</title>
      <link>https://tomtomyoung.top/post/js-class%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-class%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_Class 1. 声明类 1class Rectangle { 2 constructor(height, width) { 3 this.height = height; 4 this.width = width; 5 } 6} 函数声明和类声明之间的一个重要区别在于，函数声明会提升，类声明不会。你首先需要声明你的类，然后再访问它，否则类似以下的代码将抛出ReferenceE</description>
    </item>
    
    <item>
      <title>react jsx详解</title>
      <link>https://tomtomyoung.top/post/react-jsx%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-jsx%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： react中文文档_JSX简介 React 之技术详解（三）- 深入理解 JSX 手写 react 核心源码 配置babel-loader处理JSX语法 1. 什么是 JSX 设想如下变量声明： 1const element = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;; 这个语法既不是字符串也不是 HTML，而是</description>
    </item>
    
    <item>
      <title>react-native 简介</title>
      <link>https://tomtomyoung.top/post/react-native-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-native-%E7%AE%80%E4%BB%8B/</guid>
      <description>参考： React Native 中文网 React Native 介绍 深入理解react-native Metro_Docs react-native metro 分析 react-native bundle 到 bundle 生成到底发生了什么(metro 打包流程简析) JavaScriptCore 深入浅出JavaScriptCore React Native、React和Javascri</description>
    </item>
    
    <item>
      <title>vue 手写数据双向绑定</title>
      <link>https://tomtomyoung.top/post/vue-%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E6%89%8B%E5%86%99%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</guid>
      <description>参考： Vue.js_深入响应式原理 Vue源码分析之实现一个简易版的Vue DMQ/mvvm vue源码解读（一）Observer/Dep/Watcher是如何实现数据绑定的 Observer、Dep、Watcher 傻傻搞</description>
    </item>
    
    <item>
      <title>vue 简介</title>
      <link>https://tomtomyoung.top/post/vue-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%AE%80%E4%BB%8B/</guid>
      <description>参考： Vue_doc Vue 和 React 的优点分别是什么？ (vue) =&amp;gt; {渐进式} Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？ The Progressive Framework by Evan You 1. Vue 是什么 这一点，Vue的官网说的很清楚： 一句话来说，一套用于构建用户界面的</description>
    </item>
    
    <item>
      <title>js Array详解</title>
      <link>https://tomtomyoung.top/post/js-array%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-array%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_Array Array是一个构造函数，是用于构造数组的全局对象。 1. 构造 Array 实例 1[element0, element1, ..., elementN] 2new Array(element0, element1, ..., elementN) 3new Array(arrayLength) 2. 访问数组 1var arr = [&amp;#39;this is the first element&amp;#39;, &amp;#39;this is the second element&amp;#39;, &amp;#39;this is the last element&amp;#39;]; 2console.log(arr[0]); // 打印 &amp;#39;this is the first element&amp;#39; 3console.log(arr[1]); // 打印 &amp;#39;this is the second element&amp;#39; 4console.log(arr[arr.length - 1]); // 打印 &amp;#39;this is the last element&amp;#39; 3.</description>
    </item>
    
    <item>
      <title>vue vdom与diff详解</title>
      <link>https://tomtomyoung.top/post/vue-vdom%E4%B8%8Ediff%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vdom%E4%B8%8Ediff%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： VirtualDOM 与 diff( Vue 实现) 1. VNode 在刀耕火种的年代，我们需要在各个事件方法中直接操作DOM来达到修改视图的目的。但是当应用一大就会变得难以维护。 那我们是不是可以把真实DOM树抽象成一棵以JavaScript对象</description>
    </item>
    
    <item>
      <title>vue 数据劫持详解</title>
      <link>https://tomtomyoung.top/post/vue-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： Vue.js_深入响应式原理 Vue源码分析之实现一个简易版的Vue DMQ/mvvm 1. 数据劫持原理 关于如何实现数据劫持，在Vue的官网有一段描述： Vue 最独特的特性之一，是其非侵入性的响应式系统。数据模型仅仅是普通</description>
    </item>
    
    <item>
      <title>MVC与MVVM详解</title>
      <link>https://tomtomyoung.top/post/mvc%E4%B8%8Emvvm%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/mvc%E4%B8%8Emvvm%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MVC，MVP 和 MVVM 的图示 浅谈 MVC、MVP 和 MVVM 架构模式 架构模式：MVC与MVVM 结合vue、react、angular谈谈MVC、MVP、MVVM框架 1. 架构模式 MVC和MVVM都是架构模式！ MV</description>
    </item>
    
    <item>
      <title>react 简介</title>
      <link>https://tomtomyoung.top/post/react-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E7%AE%80%E4%BB%8B/</guid>
      <description>参考： React_doc React的特点和优势 Vue 和 React 的优点分别是什么？ React技术解密笔记——理念篇 1. React 是什么 React 是一个用于构建用户界面的 JavaScript 库。 使用 React 可以将一些独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组</description>
    </item>
    
    <item>
      <title>js Object与Function详解</title>
      <link>https://tomtomyoung.top/post/js-object%E4%B8%8Efunction%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-object%E4%B8%8Efunction%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_Object MDN_Function 1. Object 在JavaScript中，几乎所有的对象都是Object类型的实例，它们都会从Object.prototype继承属性和方法。Object 构造函数为给定值创建一个对象包装器。Object</description>
    </item>
    
    <item>
      <title>js 类与继承详解</title>
      <link>https://tomtomyoung.top/post/js-%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_JavaScript 中的继承 js继承的几种方式 Javascript继承机制的设计思想 Javascript – How Prototypal Inheritance really works javascript 中实现继承的六种方式 ES6里Class的Extends继承原理 有些人认为JavaScript并不是真正的面向对象</description>
    </item>
    
    <item>
      <title>浏览器 回流与重绘详解</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 浅谈浏览器渲染、回流和重绘 渲染树构建、布局及绘制 尽可能减少浏览器重排 1. 页面渲染 根据《浏览器 页面渲染详解》，我们可以知道浏览器渲染页面分为以下几步： 处理 HTML 标记并构建 DOM 树。 处理 CSS 标记并构建 CSSOM 树。 将 DOM</description>
    </item>
    
    <item>
      <title>浏览器 页面渲染详解</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 渲染树构建、布局及绘制 构建对象模型 浏览器渲染页面前需要先构建 DOM 和 CSSOM 树。因此，我们需要确保尽快将 HTML 和 CSS 都提供给浏览器。 1. DOM 字节 → 字符 → 令牌 → 节点 → 对象模型。 HTML 标记转换成文档对象模型 (DOM)；CS</description>
    </item>
    
    <item>
      <title>js new详解</title>
      <link>https://tomtomyoung.top/post/js-new%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-new%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_new js中关键字new的原理（含实现代码） 1. new new会实例化类的实例对象，或者说，使用构造函数，构造一个我们想要的对象。 关于类的定义有两种，使用构造函数定义的类，使用Class关键字定义的类。 1. 构</description>
    </item>
    
    <item>
      <title>js 原型与原型链详解</title>
      <link>https://tomtomyoung.top/post/js-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： js对象(一)——创建对象 js对象（二）—— 函数与对象的关系（认识原型链） 一张图搞定JS原型&amp;amp;原型链 js的初学者一般很难理解原型和原型链的概念，但原型和原型链又是js中最重要的点之一，关</description>
    </item>
    
    <item>
      <title>js ES6_module详解</title>
      <link>https://tomtomyoung.top/post/js-es6_module%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-es6_module%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： ES6 module 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的im</description>
    </item>
    
    <item>
      <title>js this详解</title>
      <link>https://tomtomyoung.top/post/js-this%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-this%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_this JavaScript 的 this 原理 彻底理解js中this的指向，不必硬背。 1. 定义this 与其他语言相比，函数的 this 关键字在 JavaScript 中的表现略有不同，此外，在严格模式和非严格模式之间也会有一些差别。 在绝大多数情况下，函数的调用</description>
    </item>
    
    <item>
      <title>js umd详解</title>
      <link>https://tomtomyoung.top/post/js-umd%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-umd%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： umd.js 可能是最详细的UMD模块入门指南 1. UMD 因为有像CommonJS、AMD、CMD等不同的规范，导致了js实现模块化有很多方式，那有没有一种方式可以屏蔽掉这种不同，让我们不去思考使用什么模块化规范，</description>
    </item>
    
    <item>
      <title>js 模块化详解</title>
      <link>https://tomtomyoung.top/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 前端模块化：CommonJS,AMD,CMD,ES6 wikipedia_CommonJS 深入浅出Node.js 前端科普系列-CommonJS：不是前端却革命了前端 从 CommonJS 到 Sea.js CommonJS wiki mozillaWiki_ServerJS 《编程时间简史系列》JavaScript 模块化的历史</description>
    </item>
    
    <item>
      <title>js 闭包详解</title>
      <link>https://tomtomyoung.top/post/js-%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN_闭包 你不懂JS：作用域与闭包 学习Javascript闭包（Closure） 在 JavaScript 中闭包无所不在，你必须识别并接纳它。 闭包是词法作用域导致的结果。闭包在你的代码中一直在被创建和使用，你在毫无</description>
    </item>
    
    <item>
      <title>js let&amp;const与块级作用域</title>
      <link>https://tomtomyoung.top/post/js-letconst%E4%B8%8E%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-letconst%E4%B8%8E%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>参考： MDN_let 为什么在 JavaScript 中为块范围变量声明选择名称“let”？ let深入理解&amp;mdash;let存在变量提升吗？ 我用了两个月的时间才理解 let JS变量封禁大法：薛定谔的X let 声明会提升（hoist）吗？ 1. 作用域对</description>
    </item>
    
    <item>
      <title>js 作用域&amp;作用域链</title>
      <link>https://tomtomyoung.top/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
      <description>参考： MDN Scope 深入理解javascript作用域系列第一篇——内部原理 深入理解javascript作用域系列第二篇——词法作用域和动态作用域 你不懂JS：作用域与闭包 let, const和块级作用域 1. 作用域 第一种说</description>
    </item>
    
    <item>
      <title>js 代码解释执行详解</title>
      <link>https://tomtomyoung.top/post/js-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： 编译语言和解释语言的区别 编译器与解释器 JavaScript的工作原理：解析、抽象语法树（AST）+ 提升编译速度5个技巧 IBM compiled-versus-interpreted-languages JavaScript 编译 - JIT (just-in-time) compiler 是怎么工作的 WebAssembly 系列（二）JavaScript Just-in-time (JIT) 工作原理 JS</description>
    </item>
    
    <item>
      <title>js Symbol详解</title>
      <link>https://tomtomyoung.top/post/js-symbol%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-symbol%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 为什么需要 Symbol 对象在 JavaScript 语言中扮演重要角色，它们的使用无处不在。对象通常用作键/值对的集合，然而，以这种方式使用它们有一个很大的限制: 在 symbol 出现之前，对象键只能是字符串，如果试图使用非字符串值作为对象的键</description>
    </item>
    
    <item>
      <title>js Set详解</title>
      <link>https://tomtomyoung.top/post/js-set%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-set%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Set 定义 Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。 2. Set 中的特殊值 Set 对象存储的值总是唯一的，所以需要判断两个值是否恒等。有几个特殊值需要特殊对待： +0 与 -0 在存储判断唯一性的时候是恒等的</description>
    </item>
    
    <item>
      <title>计算机网络 http缓存详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN HTTP/Caching MDN Cache-Control MDN Expires MDN ETag MDN If-None-Match 彻底弄懂HTTP缓存机制及原理 5分钟看懂系列：HTTP缓存机制详解 1. 什么是HTTP缓存 通过复用以前获取的资源，可以显著提高网站和应用程序的性能。 HTTP 缓存减少了等待时间和网络流量</description>
    </item>
    
    <item>
      <title>计算机网络 http请求与响应详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN http 1. HTTP HTTP (HyperText Transfer Protocol)，即超文本传输协议，是实现网络通信的一种规范。 1. HTTP报文 HTTP消息是服务器和客户端之间交换数据的方式。有两种类型的消息︰ 请求（requests）&amp;ndash</description>
    </item>
    
    <item>
      <title>计算计网络 域名与dns详解</title>
      <link>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E8%AE%A1%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E4%B8%8Edns%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E8%AE%A1%E7%AE%97%E8%AE%A1%E7%BD%91%E7%BB%9C-%E5%9F%9F%E5%90%8D%E4%B8%8Edns%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考： MDN DNS DNS 原理入门 what-is-dns 工程师最容易搞错的域名知识 域名层级划分 域名分级与域名解析过程(DNS) 1. 域名 1. 域名的层级 根域名.root对于所有域名都是一样的，所以平时是省略的； 根服务器主要用来管理互联网的主目</description>
    </item>
    
    <item>
      <title>react 类组件详解</title>
      <link>https://tomtomyoung.top/post/react-%E7%B1%BB%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/react-%E7%B1%BB%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description>React中有两种定义组件的方式： 函数定义组件 1function Welcome() { 2 return &amp;lt;h1&amp;gt;函数式&amp;lt;/h1&amp;gt; 3} 类定义组件 1class Welcome extends React.Component { 2 render() { 3 return &amp;lt;h1&amp;gt;类式&amp;lt;/h1&amp;gt;; 4 } 5} 我们来主要</description>
    </item>
    
    <item>
      <title>js 手写Promise</title>
      <link>https://tomtomyoung.top/post/js-%E6%89%8B%E5%86%99promise/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%89%8B%E5%86%99promise/</guid>
      <description>1. 简易版Promise 1. 实现executor 比如我们实例化一个Promise对象时，会这样写： 1let p1 = new Promise((resolve, reject) =&amp;gt; { 2 resolve(12345); 3}) 这里要注意的是： constructor接收一个函数作为参数； 这个传入的函数会在实例化</description>
    </item>
    
    <item>
      <title>浏览器 本地存储详解</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 基本概念 Cookie Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身</description>
    </item>
    
    <item>
      <title>js Map详解</title>
      <link>https://tomtomyoung.top/post/js-map%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-map%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Map 定义 MDN map Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值都可以作为一个键或一个值。 map和object的对比 Objects 和 Maps 类似的是，它们都允许你按键存取一个值、删除键、检测一个键是否绑定了值。因此（</description>
    </item>
    
    <item>
      <title>浏览器 xss&amp;csrf</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-xsscsrf/</guid>
      <description>1：什么是XSS攻击？ XSS，即 Cross Site Script，跨站脚本攻击； XSS 攻击是指攻击者在网站上注入恶意的客户端代码，对客户端网页进行篡改，对用户浏览器进行控制或者获取用户隐私数据； XSS攻击可以分为3类：反</description>
    </item>
    
    <item>
      <title>js Promise详解</title>
      <link>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-promise%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. Promise 定义 promise A+ A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled. promise表示异步操作的最终结果。与promise交互的主要方式是通过它的then方</description>
    </item>
    
    <item>
      <title>js setTimeout&amp;setInterval</title>
      <link>https://tomtomyoung.top/post/js-settimeoutsetinterval/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-settimeoutsetinterval/</guid>
      <description>1. setTimeout setTimeout的在一段时间之后，执行指定的一段函数 （仅执行一次） 可以理解为指定延迟后执行函数 2. setInterval setInterval是循环执行函数，每隔一段时间就执行一次指定的函数（执行N次） 可以理解为指</description>
    </item>
    
    <item>
      <title>js 事件循环与异步并发</title>
      <link>https://tomtomyoung.top/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91/</guid>
      <description>参考： The JavaScript Event Loop: Explained ES2015(ES6) MDN_并发模型与事件循环 MDN_深入：微任务和 JavaScript 运行时环境 MDN_在 JavaScript 中通过 queueMicrotask() 使用微任务 Node.js_event_loop WHATWG规范_event_loop JavaScript Info_event-loop 宏任务和微任务到底是什么？ JavaScript 运行机制详解：再谈E</description>
    </item>
    
    <item>
      <title>git husky简介</title>
      <link>https://tomtomyoung.top/post/git-husky%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-husky%E7%AE%80%E4%BB%8B/</guid>
      <description>husky5.x使用总结 husky可以让我们向项目中方便添加git hooks。通常情况下只需要如下两步就可在项目中引入并设置好husky： 将husky添加到项目的开发依赖中 1npm install -D husky 在package.j</description>
    </item>
    
    <item>
      <title>nodejs 事件循环</title>
      <link>https://tomtomyoung.top/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/nodejs-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>事件循环机制解析 当 Node.js 启动后，它会初始化事件循环，处理已提供的输入脚本（或丢入 REPL，本文不涉及到），它可能会调用一些异步的 API、调度定时器，或者调用 process.nextTick()，然后开始处</description>
    </item>
    
    <item>
      <title>git 分支的新建与合并</title>
      <link>https://tomtomyoung.top/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6/</guid>
      <description>切换到你的线上分支（production branch）。 为这个紧急任务新建一个分支，并在其中修复它。 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支。 切换回你最初工作的分</description>
    </item>
    
    <item>
      <title>git 家族式命令</title>
      <link>https://tomtomyoung.top/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E5%AE%B6%E6%97%8F%E5%BC%8F%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 初始化配置 config 1git config -global user.name &amp;lt;name&amp;gt; #设置提交者名字 2git config -global user.email &amp;lt;email&amp;gt; #设置提交者邮箱 3git config -global core.editor &amp;lt;editor&amp;gt; #设置默认文本编辑器 4git config -global merge.tool &amp;lt;tool&amp;gt; #设置解决合并冲突时差异分析工具 5git config -list #检查已有的配置信息 2. 创建本地仓库 init 1git init #初始化本地版本</description>
    </item>
    
    <item>
      <title>git 远程仓库与本地仓库</title>
      <link>https://tomtomyoung.top/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/git-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</guid>
      <description>1. 克隆远程仓库到本地 Git 的 clone 命令会为你自动将远程主机命名为 origin，拉取它的所有数据，创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。同时Git 也会给你一个与 origin 的mas</description>
    </item>
    
    <item>
      <title>js IIFE简介</title>
      <link>https://tomtomyoung.top/post/js-iife%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-iife%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 场景 下面这个面试题你大概率遇到过： 1for (var i = 0; i &amp;lt; 5; i++) { 2 setTimeout(() =&amp;gt; { 3 console.log(i); 4 }, 10); 5} 这里var会声明一个全局变量i。函数会在10毫秒后异步执行，当函数在执行时，根据作用域链会在全局变量对象中进行查找，而此时循</description>
    </item>
    
    <item>
      <title>浏览器 多进程详解</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. 进程与线程 windows打开任务管理器，可以看到后台进程列表。可以看到每个进程的内存资源信息以及cpu占有率。 所以，应该更容易理解了：进程是cpu资源分配的最小单位（系统会给它分配内存） 最后，再用较</description>
    </item>
    
    <item>
      <title>js webpack简介</title>
      <link>https://tomtomyoung.top/post/js-webpack%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-webpack%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 为什么使用webpack 1. 远古阶段 在打包工具出现之前，我们是如何在 web 中使用 JavaScript 的？ 在浏览器中运行 JavaScript 有两种方法： 引用一些脚本来存放每个功能；此解决方案很难扩展，因为加载大量脚本会导致网络瓶颈。 使用一个包</description>
    </item>
    
    <item>
      <title>vscode常用快捷键</title>
      <link>https://tomtomyoung.top/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1. 编辑器操作 ctrl+shift+n 打开新的编辑器窗口 ctrl+shiift+w 关闭当前编辑器窗口 f11 全屏显示 2. 文件操作 ctrl+tab 在打开的文件之间进行切换 ctrl+n 新建文件 ctrl+w 关闭当前文件窗口 ctrl+\ 切出一个新的文件窗口 ctrl+alt+→/← 将当前文件切到新窗口 3. 光标移</description>
    </item>
    
    <item>
      <title>浏览器 console API</title>
      <link>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%B5%8F%E8%A7%88%E5%99%A8-console-api/</guid>
      <description>console.assert(expression, object) 级别：Error expression评估为false时，将object写入控制台。 1const x = 5; 2const y = 3; 3const reason = &amp;#39;x is expected to be less than y&amp;#39;; 4console.assert(x &amp;lt; y, {x, y, reason}); console.clear() 清空控制台 1console.clear(); 如果启用了Preserve Log，console.</description>
    </item>
    
    <item>
      <title>vue 组件通信详解</title>
      <link>https://tomtomyoung.top/post/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. props和$emit 父组件向子组件传递数据是通过prop传递的，子组件传递数据给父组件是通过$emit触发事件来做到的. 1Vue.component(&amp;#39;child&amp;#39;,{ 2 data(){ 3 return { 4 mymessage:this.message 5 } 6 }, 7 template: 8 `&amp;lt;div&amp;gt; 9&amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;mymessage&amp;#34; @input=&amp;#34;passData(mymessage)&amp;#34;&amp;gt; 10&amp;lt;/div&amp;gt;`, 11 props:[&amp;#39;mess</description>
    </item>
    
    <item>
      <title>vue 生命周期详解</title>
      <link>https://tomtomyoung.top/post/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</guid>
      <description>1. beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods， data， computed等上的方法和数据。 2. created 实例已经创建完成之后被调</description>
    </item>
    
    <item>
      <title>算法 树的操作</title>
      <link>https://tomtomyoung.top/post/%E7%AE%97%E6%B3%95-%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E7%AE%97%E6%B3%95-%E6%A0%91%E7%9A%84%E6%93%8D%E4%BD%9C/</guid>
      <description>1. 遍历二叉树 1var {tree} = require(&amp;#39;../重建二叉树/3.js&amp;#39;) 2 3// 先序遍历 4var preTraResult = []; 5 6function preTra(tree){ 7 if(tree.val!=&amp;#39;#&amp;#39;){ 8 preTraResult.push(tree.val); 9 preTra(tree.left); 10 preTra(tree.right); 11 } 12 else{ 13 preTraResult.push(tree.val); 14 return; 15 } 16} 17 18preTra(tree); 19 20console.log(preTraResult); 21 22// 中序遍历 23var inorderTraResult = []; 24 25function inorderTra(tree){ 26 if(tree.val!=&amp;#39;#&amp;#39;){ 27 inorderTra(tree.left); 28 inorderTraResult.push(tree.val); 29 inorderTra(tree.right); 30 }</description>
    </item>
    
    <item>
      <title>js 算法</title>
      <link>https://tomtomyoung.top/post/js-%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E7%AE%97%E6%B3%95/</guid>
      <description>1. 快速排序 1const arr = [ 31, 23, 34, 2, 13, 134, 1, 23, 456, 52, 31 ]; 2 3function quickSort(arr) { 4 // 1.找基准数， 5 // 比基准数大的放右边（右数组） 6 // 比基准数小的放左边（左数组） 7 let base_num = arr[0]; 8 let left_arr = []; 9 let right_arr = []; 10 11 // for( let i = 1; i &amp;lt; arr.length ; i++){ 12 // if(arr[i] &amp;lt; base_num){ 13</description>
    </item>
    
    <item>
      <title>css vh&amp;vw</title>
      <link>https://tomtomyoung.top/post/css-vhvw/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/css-vhvw/</guid>
      <description>1. vw vh的介绍 vw,vh是css3中给我们提供的新的单位，他们是相对于viewport视窗的宽高进行计算的单位。说白了，就是相对于浏览器的窗口的大小。 vw : 1vw 等于视口宽度的1% vh : 1vh 等于视口高度的1% vmin</description>
    </item>
    
    <item>
      <title>cross origin requests are only supported for protocol schemes填坑</title>
      <link>https://tomtomyoung.top/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/cross-origin-requests-are-only-supported-for-protocol-schemes%E5%A1%AB%E5%9D%91/</guid>
      <description>今天在写了一个简单的H5页面，项目结构如下图所示： 然后在运行的时候突然报错 Access to script at ‘file:///Volumes/PERSON/font_end/h5xuexi/h5-learning3/vue_n</description>
    </item>
    
    <item>
      <title>elementUI事件回调函数传参，传递默认参数和自定义参数填坑</title>
      <link>https://tomtomyoung.top/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/elementui%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E4%BC%A0%E5%8F%82%E4%BC%A0%E9%80%92%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0%E5%A1%AB%E5%9D%91/</guid>
      <description>使用element一些组件，事件如果还有默认参数，如果想在添加自定义参数。如： handleCheckedCitiesChange事件默认有一个回调参数，如果传一个自定义参数直接写的话 handleCheckedCitiesChange (“自定义参数”</description>
    </item>
    
    <item>
      <title>js 循环遍历详解</title>
      <link>https://tomtomyoung.top/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/</guid>
      <description>参考：</description>
    </item>
    
    <item>
      <title>js 正则表达式</title>
      <link>https://tomtomyoung.top/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/js-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>1 两种模糊匹配 如果正则只有精确匹配是没多大意义的，比如/hello/，也只能匹配字符串中的&amp;quot;hello&amp;quot;这个子串。 1var regex = /hello/; 2console.log( regex.test(&amp;#34;hello&amp;#34;) ); 正则表达式之所以强大，是因为其能实现模糊匹配。 而模糊</description>
    </item>
    
    <item>
      <title>vue v-if填坑</title>
      <link>https://tomtomyoung.top/post/vue-v-if%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-v-if%E5%A1%AB%E5%9D%91/</guid>
      <description>在使用v-if控制元素显示隐藏时候，如果判断条件是数组中的元素，在一开始页面渲染显示正常，可以用数组内的变量来控制v-if元素，但是以后通过方法直接改变数组内变量却不能影响v-if控制的元素显示隐藏。</description>
    </item>
    
    <item>
      <title>lodop lodop&amp;c-lodop</title>
      <link>https://tomtomyoung.top/post/lodop-lodopc-lodop/</link>
      <pubDate>Sun, 31 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/lodop-lodopc-lodop/</guid>
      <description>转载自：http://www.c-lodop.com/faq/pp21.html 一．安装文件 1.Lodop打印控件安装文件两个: 32位安装程序：install_lodop32.exe； 64位安装程序：</description>
    </item>
    
    <item>
      <title>vue v-model绑定vuex中state报错填坑</title>
      <link>https://tomtomyoung.top/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-v-model%E7%BB%91%E5%AE%9Avuex%E4%B8%ADstate%E6%8A%A5%E9%94%99%E5%A1%AB%E5%9D%91/</guid>
      <description>1. 代码背景 用vuex管理数据状态，state中有定义 expressTemplate: false； vue的cart页面有使用vant的标签, 提示报错 Computed property “expressTemplate” was assigned to but it has no setter； 1&amp;lt;el-radio-group v-model=&amp;#34;expressTemplate&amp;#34;&amp;gt; 2 &amp;lt;el-radio v-for=&amp;#34;( item, index ) in</description>
    </item>
    
    <item>
      <title>ssr&amp;csr</title>
      <link>https://tomtomyoung.top/post/ssrcsr/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ssrcsr/</guid>
      <description>1. SSR和CSR的概念 SSR(Server Side Rendering)： SSR是传统的渲染方式，由服务端把渲染好的完整的页面发送给客户端。客户端拿到的是完整的页面，可以直接展示。前后端分离之前很长的一段时间里都是以服务端渲染</description>
    </item>
    
    <item>
      <title>el-table定制选中行样式和展开行样式</title>
      <link>https://tomtomyoung.top/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/el-table%E5%AE%9A%E5%88%B6%E9%80%89%E4%B8%AD%E8%A1%8C%E5%B1%95%E5%BC%80%E8%A1%8C%E6%A0%B7%E5%BC%8F/</guid>
      <description>1. 变量 变量如下所示： 1data() { 2 return { 3 // 记录选中行 4 selectRow: [], 5 // 记录展开行 6 expandRow: [], 7 // 表格数据 id必须有！！ 8 tableData: [ 9 { 10 id: 1, 11 wangwangID: &amp;#39;hahahaha-101&amp;#39;, 12 count: &amp;#39;20&amp;#39;, 13 date: &amp;#39;2016-05-03&amp;#39;, 14 name: &amp;#39;王小虎&amp;#39;, 15 address: &amp;#39;上海市普陀区金沙江路 1518 弄</description>
    </item>
    
    <item>
      <title>elementUI组件二次封装</title>
      <link>https://tomtomyoung.top/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/elementui%E7%BB%84%E4%BB%B6%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/</guid>
      <description>1. 新建组件 在components文件夹下新建组件，或者可以新建一个UI文件夹，用来专门存放二次封装的UI组件。 2. 编写组件 1. 基本结构 1&amp;lt;template&amp;gt; 2 &amp;lt;el-dialog 3 class=&amp;#34;dialog-1&amp;#34; &amp;gt; 4 &amp;lt;/el-dialog&amp;gt; 5&amp;lt;/template&amp;gt; 6 7&amp;lt;script&amp;gt; 8export default { 9 name: &amp;#34;myDialog1&amp;#34;, 10 props: { 11 }, 12 computed: { 13 }, 14 methods: { 15 } 16} 17&amp;lt;/script&amp;gt; 18</description>
    </item>
    
    <item>
      <title>互联网建站全流程</title>
      <link>https://tomtomyoung.top/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%BB%BA%E7%AB%99%E5%85%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E4%BA%92%E8%81%94%E7%BD%91%E5%BB%BA%E7%AB%99%E5%85%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>1. 域名 1.1 域名简介 在 Internet 上有千百万台主机，为了区分这些主机，每一台主机都被分配一个 IP 地址。但由于 IP 地址没有实际意义且难于记忆，于是就有了域名（Domain Name）。 域名主要是由英文字母、阿拉伯数字、“ -</description>
    </item>
    
    <item>
      <title>mongoose使用教程</title>
      <link>https://tomtomyoung.top/post/mongoose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/mongoose%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
      <description>1.连接数据库 1// 引入安装的包 2var mongoose = require(&amp;#39;mongoose&amp;#39;); 3mongoose.connect(&amp;#39;mongodb://localhost/mongoo&amp;#39;); 4//mongoo这里是代表数据库的名称 5var db = mongoose.connection; 6db.on(&amp;#39;error&amp;#39;, console.error.bind(console, &amp;#39;连接失败&amp;#39;)); 7db.once(&amp;#39;open&amp;#39;, function() { 8 console.log(&amp;#39;连接成功&amp;#39;) 9}); 10// new一个</description>
    </item>
    
    <item>
      <title>redis简介</title>
      <link>https://tomtomyoung.top/post/redis%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/redis%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是Redis Redis全称REmote DIctionary Server( 远程字典服务器 ) ，是一个由Salvatore Sanfilippo写的key-value存储系统。 Redis遵守BSD协议、支持网络、可基于内存亦可持久化</description>
    </item>
    
    <item>
      <title>mongoDB简介</title>
      <link>https://tomtomyoung.top/post/mongodb%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/mongodb%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 我们常用的数据库有哪些？ MySQL和MariaDB； Oracle； SQL Server； 上面的三个是最流行的数据库，也是我们开发时频繁的使用数据库。 MySQL是关系型数据库管理系统。 Oracle全称Ora</description>
    </item>
    
    <item>
      <title>node&amp;npm简介</title>
      <link>https://tomtomyoung.top/post/nodenpm%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/nodenpm%E7%AE%80%E4%BB%8B/</guid>
      <description>1.jacascript JavaScript和ECMAScript通常被人用来表达相同的意思，但JavaScript的含义去比ECMA-262中规定的多得多。一个完整的JavaScript实现应由三个部分组成： 核心（ECM</description>
    </item>
    
    <item>
      <title>ajax 预检请求</title>
      <link>https://tomtomyoung.top/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ajax-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82/</guid>
      <description>1.什么是预检请求 定义：预检请求（Preflighted requests ）是浏览器发起跨域请求时，通过OPTIONS方法询问服务器对跨域请求的支持情况（支持的包含请求方法、请求头、数据类型）。 2.什么时候会触发预检</description>
    </item>
    
    <item>
      <title>ajax xhr</title>
      <link>https://tomtomyoung.top/post/ajax-xhr/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ajax-xhr/</guid>
      <description>1. XMLHTTPRequest（xhr） XMLHTTPRequest对象，顾名思义：是基于XML的HTTP请求。我们在浏览器中使用XMLHTTPRequest对象在服务器之间通信，传输的数据是使用XM</description>
    </item>
    
    <item>
      <title>前后端分离简介</title>
      <link>https://tomtomyoung.top/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 前后端不分离 我们先看看一个 Web 系统，在前后端不分离时架构设计是什么样的： 用户在浏览器上发送请求，服务器端接收到请求，根据 Header 中的 token 进行用户鉴权，从数据库取出数据，处理后将结果数据填入 HTML 模板，返回给浏览器</description>
    </item>
    
    <item>
      <title>html5&amp;html&amp;h5</title>
      <link>https://tomtomyoung.top/post/html5htmlh5/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/html5htmlh5/</guid>
      <description>1.官方解释 1.1 html HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组</description>
    </item>
    
    <item>
      <title>svg简介</title>
      <link>https://tomtomyoung.top/post/svg%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/svg%E7%AE%80%E4%BB%8B/</guid>
      <description>1.官方解释 SVG是一种图像文件格式，它的英文全称为Scalable Vector Graphics，意思为可缩放的矢量图形。它是基于XML（Extensible Markup Language），由World Wide Web Consort</description>
    </item>
    
    <item>
      <title>vue slot简介</title>
      <link>https://tomtomyoung.top/post/vue-slot%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-slot%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 什么是插槽？ 插槽（Slot）是Vue提出来的一个概念，正如名字一样，插槽用于决定将所携带的内容，插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。 插槽显不显示、怎样显示是由父组件</description>
    </item>
    
    <item>
      <title>vue vuex简介</title>
      <link>https://tomtomyoung.top/post/vue-vuex%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vuex%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 概述 Vuex是实现组件全局状态（数据）管理的一种机制，可以方便的实现组件之间的数据共享。 2. 优势 使用Vuex管理数据的好处： 能够在vuex中集中管理共享的数据，便于开发和后期进行维护 能够高效的实现组件</description>
    </item>
    
    <item>
      <title>opencv 腐蚀与膨胀</title>
      <link>https://tomtomyoung.top/post/opencv-%E8%85%90%E8%9A%80%E4%B8%8E%E8%86%A8%E8%83%80/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/opencv-%E8%85%90%E8%9A%80%E4%B8%8E%E8%86%A8%E8%83%80/</guid>
      <description>形态学操作 简单来讲，形态学操作就是基于形状的一系列图像处理操作。通过将 结构元素 作用于输入图像来产生输出图像。 最基本的形态学操作有二：腐蚀与膨胀(Erosion 与 Dilation)。 他们的运用广泛: 消除</description>
    </item>
    
    <item>
      <title>ecmascript&amp;javascript</title>
      <link>https://tomtomyoung.top/post/ecmascriptjavascript/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ecmascriptjavascript/</guid>
      <description>1. ECMAScript的简介 ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这</description>
    </item>
    
    <item>
      <title>图像识别工程搭建步骤</title>
      <link>https://tomtomyoung.top/post/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</guid>
      <description>1. 数据准备 一般分为5个步骤 拍摄照片或者下载数据集； 图像标注； 图像数据处理： 图像合成、图像裁剪、改变图像像素大小； 检查标注文件的正确性； 划分训练集、验证集； 2. 搭建神经网络 3. 训练模型 读取数据的多线程生成器</description>
    </item>
    
    <item>
      <title>数据库与数据仓库</title>
      <link>https://tomtomyoung.top/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</guid>
      <description>1.基本概念 了解数据库与数据仓库的区别之前，首先掌握三个概念。数据库软件、数据库、数据仓库。 数据库软件：是一种软件，可以看得见，可以操作。用来实现数据库逻辑功能。属于物理层。 数据库：是一种逻辑概念，用</description>
    </item>
    
    <item>
      <title>ts 断点调试</title>
      <link>https://tomtomyoung.top/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ts-%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</guid>
      <description>1. 什么是断点 断点是程序暂停执行的位置，调试时程序运行到此处，就会暂停。 2. 配置 VSCode 在vscode中选择运行，然后选择添加配置： 在launch.json里写入一下内容 1{ 2 // 使用 IntelliSense 了解相关属性。 3 // 悬停以查看</description>
    </item>
    
    <item>
      <title>ts ts与vue</title>
      <link>https://tomtomyoung.top/post/ts-ts%E4%B8%8Evue/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ts-ts%E4%B8%8Evue/</guid>
      <description>1.为什么是 TS + Vue 前端正处在逐步挺进企业级开发业务的过程中，强类型的TS已经广泛的使用起来，而脚手架工具也是前端工程化的基础。 2.使用 VueCLI 脚手架创建项目 1.创建项目 1vue create 项目名 2.安装 vue typescript 支持 1vue add @vue/typescript 3.安</description>
    </item>
    
    <item>
      <title>ts 基础语法</title>
      <link>https://tomtomyoung.top/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ts-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>1. 变量与数据类型 1. 声明变量 在js中变量是不区分类型的，这一点在ts中做出了改变，ts规定变量在声明时必须规定好这个变量的数据类型，并以:的形式进行指定。 2. 数据类型 JavaScript 的类型分为两种：原始数据类型（Pri</description>
    </item>
    
    <item>
      <title>ts 安装和配置</title>
      <link>https://tomtomyoung.top/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ts-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</guid>
      <description>1. TS 简介 TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码开源于 GitHub 上。 其次引用官网的定义： TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。T</description>
    </item>
    
    <item>
      <title>thinkphp数据库缓存问题</title>
      <link>https://tomtomyoung.top/post/thinkphp%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/thinkphp%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</guid>
      <description>1.问题 在使用thinkphp作为后端的框架时，对于一个我们一直在使用的数据库，如果我们中途对数据库中某个表进行字段的添加，那么会出现一种情况是我们需要对这个新添加的字段进行操作时，会提示非法字段，也</description>
    </item>
    
    <item>
      <title>ajax axios发送post请求踩坑记录</title>
      <link>https://tomtomyoung.top/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/ajax-axios%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E5%A1%AB%E5%9D%91/</guid>
      <description>参考： 作者：Never Yu丶 文章：axios 发 post 请求，后端接收不到参数的解决方案 链接：https://blog.csdn.net/csdn_yudong/article/details/7966865</description>
    </item>
    
    <item>
      <title>electron简介</title>
      <link>https://tomtomyoung.top/post/electron%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/electron%E7%AE%80%E4%BB%8B/</guid>
      <description>1.Electron 是什么 1.Electron定义 Electron是一个能让你使用传统前端技术（Nodejs, Javascript, HTML, CSS）开发一个跨平台桌面应用的框架。这里所说的桌面应用指的是在Windows、OSX及Linux系统上</description>
    </item>
    
    <item>
      <title>偏差与方差</title>
      <link>https://tomtomyoung.top/post/%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/%E5%81%8F%E5%B7%AE%E4%B8%8E%E6%96%B9%E5%B7%AE/</guid>
      <description>1.偏差bias bias描述的是根据样本拟合出的模型的输出预测结果的期望与样本真实结果的差距。 简单讲，就是在样本上拟合的好不好。要想在bias上表现好，low bias，就得复杂化模型，增加模型的参数，</description>
    </item>
    
    <item>
      <title>pytorch简介</title>
      <link>https://tomtomyoung.top/post/pytorch%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/pytorch%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 机器学习与深度学习 人工智能的浪潮正席卷全球，诸多词汇时刻萦绕在我们的耳边，如人工智能，机器学习，深度学习等。“人工智能”的概念早在1956年就被提出，顾名思义用计算机来构造复杂的，拥有与人类智慧同样</description>
    </item>
    
    <item>
      <title>vue vuecli简介</title>
      <link>https://tomtomyoung.top/post/vue-vuecli%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/vue-vuecli%E7%AE%80%E4%BB%8B/</guid>
      <description>1. VueCLI 简介 vue-cli俗称脚手架，可以快速创建vue项目结构，学习完webpack之后，我们会有一种体会就是项目的每个文件夹，每个文件都需要我们手动新建，小项目还好，如果遇到复杂的大项目，这会大大降低</description>
    </item>
    
    <item>
      <title>win10&#43;ubuntu18.04双系统</title>
      <link>https://tomtomyoung.top/post/win10&#43;ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tomtomyoung.top/post/win10&#43;ubuntu18.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</guid>
      <description>1.下载ubuntu系统 ubuntu官网下载镜像：https://ubuntu.com/download/desktop 目前ubuntu20.04LST版本已经发布，但安装过程和18.04LST应该没</description>
    </item>
    
  </channel>
</rss>